
LAB-03_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003738  08003738  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003740  08003740  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000009c  080037e4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  200001bc  080037e4  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4e0  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018fb  00000000  00000000  0002c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b0b  00000000  00000000  0002dea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000818  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007c0  00000000  00000000  000331c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002b9d3  00000000  00000000  00033988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00007dc9  00000000  00000000  0005f35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001088ae  00000000  00000000  00067124  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0016f9d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ef4  00000000  00000000  0016fa50  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stab         0000006c  00000000  00000000  00171944  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000000e3  00000000  00000000  001719b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000009c 	.word	0x2000009c
 800021c:	00000000 	.word	0x00000000
 8000220:	080034b8 	.word	0x080034b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a0 	.word	0x200000a0
 800023c:	080034b8 	.word	0x080034b8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <configureSPI>:
/*
 * For convenience, configure the SPI handler here
 */
// See 769 Description of HAL drivers.pdf, Ch. 58.1 or stm32f7xx_hal_spi.c
void configureSPI()
{
 80005e0:	b508      	push	{r3, lr}
	spi2.Instance = SPI2; // Please use SPI2!
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <configureSPI+0x28>)
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <configureSPI+0x2c>)
 80005e6:	6003      	str	r3, [r0, #0]
	spi2.Init.Mode = SPI_MODE_MASTER; // Set master mode
 80005e8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80005ec:	6043      	str	r3, [r0, #4]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE; // Use Motorola mode, not TI mode
 80005ee:	2300      	movs	r3, #0
 80005f0:	6243      	str	r3, [r0, #36]	; 0x24
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005f2:	6103      	str	r3, [r0, #16]
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	6143      	str	r3, [r0, #20]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005f6:	6083      	str	r3, [r0, #8]
	spi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f8:	6283      	str	r3, [r0, #40]	; 0x28
	spi2.Init.BaudRatePrescaler = SPI_CRCCALCULATION_DISABLE;
 80005fa:	61c3      	str	r3, [r0, #28]
	spi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000600:	6183      	str	r3, [r0, #24]

	/*
 * ... You get the idea.
 */

	HAL_SPI_Init(&spi2);
 8000602:	f001 f842 	bl	800168a <HAL_SPI_Init>
	// Note: HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
	//
	// HAL_SPI_Init() will call HAL_SPI_MspInit() after reading the properities of
	// the passed SPI_HandleTypeDef. After finishing the MspInit call, it will set
	// the SPI property bits. This is how all HAL_[peripheral]_Init() functions work.
}
 8000606:	bd08      	pop	{r3, pc}
 8000608:	200000cc 	.word	0x200000cc
 800060c:	40003800 	.word	0x40003800

08000610 <HAL_SPI_MspInit>:
 // __weak function of the same name. It does not need a prototype in the header.
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
	// SPI GPIO initialization structure here

	if (hspi->Instance == SPI2)
 8000610:	6802      	ldr	r2, [r0, #0]
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <HAL_SPI_MspInit+0xa8>)
 8000614:	429a      	cmp	r2, r3
 8000616:	d000      	beq.n	800061a <HAL_SPI_MspInit+0xa>
 8000618:	4770      	bx	lr
{
 800061a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061c:	b089      	sub	sp, #36	; 0x24
	{
		// Enable SPI GPIO port clocks, set HAL GPIO init structure's values for each
		// SPI-related port pin (SPI port pin configuration), enable SPI IRQs (if applicable), etc.

		__GPIOB_CLK_ENABLE();
 800061e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	f042 0202 	orr.w	r2, r2, #2
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f002 0202 	and.w	r2, r2, #2
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	9a00      	ldr	r2, [sp, #0]
		__GPIOA_CLK_ENABLE();
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f042 0201 	orr.w	r2, r2, #1
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
 800063c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063e:	f002 0201 	and.w	r2, r2, #1
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	9a01      	ldr	r2, [sp, #4]
		__SPI2_CLK_ENABLE();
 8000646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitTypeDef gpio_init;

		//SPI2_SCK
		// Pin -> PA12
		gpio_init.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	9304      	str	r3, [sp, #16]
		gpio_init.Alternate = GPIO_AF5_SPI2;
 800065c:	2305      	movs	r3, #5
 800065e:	9307      	str	r3, [sp, #28]
		gpio_init.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	9305      	str	r3, [sp, #20]
		gpio_init.Speed = GPIO_SPEED_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	9306      	str	r3, [sp, #24]
		gpio_init.Pin = GPIO_PIN_12;
 8000668:	ac08      	add	r4, sp, #32
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	f844 3d14 	str.w	r3, [r4, #-20]!
		HAL_GPIO_Init(GPIOA, &gpio_init);
 8000672:	4d12      	ldr	r5, [pc, #72]	; (80006bc <HAL_SPI_MspInit+0xac>)
 8000674:	4621      	mov	r1, r4
 8000676:	4628      	mov	r0, r5
 8000678:	f000 fafc 	bl	8000c74 <HAL_GPIO_Init>


		//SPI2_CS
		// Pin -> PA11
		gpio_init.Pin = GPIO_PIN_11;
 800067c:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000680:	9603      	str	r6, [sp, #12]
		HAL_GPIO_Init(GPIOA, &gpio_init);
 8000682:	4621      	mov	r1, r4
 8000684:	4628      	mov	r0, r5
 8000686:	f000 faf5 	bl	8000c74 <HAL_GPIO_Init>


		//SPI2_MISO
		// Pin -> PB14
		gpio_init.Pin = GPIO_PIN_14;
 800068a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800068e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &gpio_init);
 8000690:	4f0b      	ldr	r7, [pc, #44]	; (80006c0 <HAL_SPI_MspInit+0xb0>)
 8000692:	4621      	mov	r1, r4
 8000694:	4638      	mov	r0, r7
 8000696:	f000 faed 	bl	8000c74 <HAL_GPIO_Init>

		//SPI2_MOSI
		// Pin -> PB15
		gpio_init.Pin = GPIO_PIN_15;
 800069a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800069e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &gpio_init);
 80006a0:	4621      	mov	r1, r4
 80006a2:	4638      	mov	r0, r7
 80006a4:	f000 fae6 	bl	8000c74 <HAL_GPIO_Init>

		//SPI2_CS
		// Pin -> PA11
		gpio_init.Pin = GPIO_PIN_11;
 80006a8:	9603      	str	r6, [sp, #12]

		HAL_GPIO_Init(GPIOA, &gpio_init);
 80006aa:	4621      	mov	r1, r4
 80006ac:	4628      	mov	r0, r5
 80006ae:	f000 fae1 	bl	8000c74 <HAL_GPIO_Init>
	}
}
 80006b2:	b009      	add	sp, #36	; 0x24
 80006b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40003800 	.word	0x40003800
 80006bc:	40020000 	.word	0x40020000
 80006c0:	40020400 	.word	0x40020400

080006c4 <main>:

int main(void)
{
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	b083      	sub	sp, #12
	Sys_Init();
 80006c8:	f000 f932 	bl	8000930 <Sys_Init>

	// For convenience
	configureSPI();
 80006cc:	f7ff ff88 	bl	80005e0 <configureSPI>


    printf("\033c");
 80006d0:	4846      	ldr	r0, [pc, #280]	; (80007ec <main+0x128>)
 80006d2:	f002 f865 	bl	80027a0 <iprintf>
    printf("\033[2J\033[;H"); // Erase screen & move cursor to home position
 80006d6:	4846      	ldr	r0, [pc, #280]	; (80007f0 <main+0x12c>)
 80006d8:	f002 f862 	bl	80027a0 <iprintf>
    fflush(stdout); // Need to flush stdout after using printf that doesn't end in \n
 80006dc:	4c45      	ldr	r4, [pc, #276]	; (80007f4 <main+0x130>)
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	6898      	ldr	r0, [r3, #8]
 80006e2:	f001 fe7f 	bl	80023e4 <fflush>

    printf(YELLOW "The terminal will now print 80 characters horizontally.\n\r"); // 80 x 24 terminal sizing (in case terminal isn't initialized as 80 x 24)
 80006e6:	4844      	ldr	r0, [pc, #272]	; (80007f8 <main+0x134>)
 80006e8:	f002 f85a 	bl	80027a0 <iprintf>
    printf("Resize the window to fit, then press enter to continue.\n\n\r");
 80006ec:	4843      	ldr	r0, [pc, #268]	; (80007fc <main+0x138>)
 80006ee:	f002 f857 	bl	80027a0 <iprintf>
	printf("Press 'ENTER' to continue.\n\r");
 80006f2:	4843      	ldr	r0, [pc, #268]	; (8000800 <main+0x13c>)
 80006f4:	f002 f854 	bl	80027a0 <iprintf>
	fflush(stdout);
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	6898      	ldr	r0, [r3, #8]
 80006fc:	f001 fe72 	bl	80023e4 <fflush>
    getchar();
 8000700:	f001 ff68 	bl	80025d4 <getchar>

    for (int j = 0; j < 80; j++) // print 80 horizontal characters for terminal sizing
 8000704:	2400      	movs	r4, #0
 8000706:	e008      	b.n	800071a <main+0x56>
    {
    	printf("X");
 8000708:	2058      	movs	r0, #88	; 0x58
 800070a:	f002 f861 	bl	80027d0 <putchar>
    	fflush(stdout);
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <main+0x130>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6898      	ldr	r0, [r3, #8]
 8000714:	f001 fe66 	bl	80023e4 <fflush>
    for (int j = 0; j < 80; j++) // print 80 horizontal characters for terminal sizing
 8000718:	3401      	adds	r4, #1
 800071a:	2c4f      	cmp	r4, #79	; 0x4f
 800071c:	ddf4      	ble.n	8000708 <main+0x44>
    }
    getchar();
 800071e:	f001 ff59 	bl	80025d4 <getchar>
    printf("\r\n");
 8000722:	4838      	ldr	r0, [pc, #224]	; (8000804 <main+0x140>)
 8000724:	f002 f8c4 	bl	80028b0 <puts>

    printf("The terminal will now print 24 characters vertically.\n\r");
 8000728:	4837      	ldr	r0, [pc, #220]	; (8000808 <main+0x144>)
 800072a:	f002 f839 	bl	80027a0 <iprintf>
    printf("Resize the window to fit, then press enter to continue.\n\n\r");
 800072e:	4833      	ldr	r0, [pc, #204]	; (80007fc <main+0x138>)
 8000730:	f002 f836 	bl	80027a0 <iprintf>
	printf("Press 'ENTER' to continue.\n\r");
 8000734:	4832      	ldr	r0, [pc, #200]	; (8000800 <main+0x13c>)
 8000736:	f002 f833 	bl	80027a0 <iprintf>
	fflush(stdout);
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <main+0x130>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6898      	ldr	r0, [r3, #8]
 8000740:	f001 fe50 	bl	80023e4 <fflush>
    getchar();
 8000744:	f001 ff46 	bl	80025d4 <getchar>

    for (int k = 0; k < 24; k++) // print 24 vertical characters for terminal sizing
 8000748:	2400      	movs	r4, #0
 800074a:	e008      	b.n	800075e <main+0x9a>
    {
    	printf("X\n\r");
 800074c:	482f      	ldr	r0, [pc, #188]	; (800080c <main+0x148>)
 800074e:	f002 f827 	bl	80027a0 <iprintf>
    	fflush(stdout);
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <main+0x130>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6898      	ldr	r0, [r3, #8]
 8000758:	f001 fe44 	bl	80023e4 <fflush>
    for (int k = 0; k < 24; k++) // print 24 vertical characters for terminal sizing
 800075c:	3401      	adds	r4, #1
 800075e:	2c17      	cmp	r4, #23
 8000760:	ddf4      	ble.n	800074c <main+0x88>
    }
    getchar();
 8000762:	f001 ff37 	bl	80025d4 <getchar>

    for (int i = 0; i < 24; i++) // color the terminal blue
 8000766:	2400      	movs	r4, #0
 8000768:	e008      	b.n	800077c <main+0xb8>
    {
    	printf(YELLOW "\n");
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <main+0x14c>)
 800076c:	f002 f8a0 	bl	80028b0 <puts>
    	fflush(stdout);
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0x130>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6898      	ldr	r0, [r3, #8]
 8000776:	f001 fe35 	bl	80023e4 <fflush>
    for (int i = 0; i < 24; i++) // color the terminal blue
 800077a:	3401      	adds	r4, #1
 800077c:	2c17      	cmp	r4, #23
 800077e:	ddf4      	ble.n	800076a <main+0xa6>
    }

	printf("\r\n *Please Begin Data Transfer*\r\n");
 8000780:	4824      	ldr	r0, [pc, #144]	; (8000814 <main+0x150>)
 8000782:	f002 f895 	bl	80028b0 <puts>
	while (1){

		character = getchar();
 8000786:	f001 ff25 	bl	80025d4 <getchar>
 800078a:	4c23      	ldr	r4, [pc, #140]	; (8000818 <main+0x154>)
 800078c:	7020      	strb	r0, [r4, #0]

		printf("\r\n   *START OF TRANSMISSION* \r\n");
 800078e:	4823      	ldr	r0, [pc, #140]	; (800081c <main+0x158>)
 8000790:	f002 f88e 	bl	80028b0 <puts>
		printf("\033[5m\r\n Data sent: %c\033[0m\033[33;44m\r\n", character);
 8000794:	7821      	ldrb	r1, [r4, #0]
 8000796:	4822      	ldr	r0, [pc, #136]	; (8000820 <main+0x15c>)
 8000798:	f002 f802 	bl	80027a0 <iprintf>
		printf(" %s\r\n", str);
 800079c:	4921      	ldr	r1, [pc, #132]	; (8000824 <main+0x160>)
 800079e:	4822      	ldr	r0, [pc, #136]	; (8000828 <main+0x164>)
 80007a0:	f001 fffe 	bl	80027a0 <iprintf>


		HAL_SPI_TransmitReceive(&spi2, (uint8_t*)&character, (uint8_t*)read1, 1, 10);
 80007a4:	4d21      	ldr	r5, [pc, #132]	; (800082c <main+0x168>)
 80007a6:	230a      	movs	r3, #10
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	462a      	mov	r2, r5
 80007ae:	4621      	mov	r1, r4
 80007b0:	481f      	ldr	r0, [pc, #124]	; (8000830 <main+0x16c>)
 80007b2:	f000 ffd6 	bl	8001762 <HAL_SPI_TransmitReceive>

		if (read1[0] == character){
 80007b6:	782a      	ldrb	r2, [r5, #0]
 80007b8:	7823      	ldrb	r3, [r4, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d1e3      	bne.n	8000786 <main+0xc2>

			printf(" %s\r\n", str1);
 80007be:	491d      	ldr	r1, [pc, #116]	; (8000834 <main+0x170>)
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <main+0x164>)
 80007c2:	f001 ffed 	bl	80027a0 <iprintf>
			printf(" Data received: %c\r\n", read1[0]);
 80007c6:	7829      	ldrb	r1, [r5, #0]
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <main+0x174>)
 80007ca:	f001 ffe9 	bl	80027a0 <iprintf>
			time1 = HAL_GetTick()-time1;
 80007ce:	f000 f9f1 	bl	8000bb4 <HAL_GetTick>
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <main+0x178>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	1a80      	subs	r0, r0, r2
 80007d8:	6018      	str	r0, [r3, #0]
			printf(" Time taken: %d msec\r\n", time1);
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4818      	ldr	r0, [pc, #96]	; (8000840 <main+0x17c>)
 80007de:	f001 ffdf 	bl	80027a0 <iprintf>

			printf("\r\n   *END OF TRANSMISSION* \r\n\r\n");
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <main+0x180>)
 80007e4:	f002 f864 	bl	80028b0 <puts>
 80007e8:	e7cd      	b.n	8000786 <main+0xc2>
 80007ea:	bf00      	nop
 80007ec:	080034e8 	.word	0x080034e8
 80007f0:	080034ec 	.word	0x080034ec
 80007f4:	20000038 	.word	0x20000038
 80007f8:	080034f8 	.word	0x080034f8
 80007fc:	0800353c 	.word	0x0800353c
 8000800:	08003578 	.word	0x08003578
 8000804:	08003538 	.word	0x08003538
 8000808:	08003598 	.word	0x08003598
 800080c:	080035d0 	.word	0x080035d0
 8000810:	080035d4 	.word	0x080035d4
 8000814:	080035e0 	.word	0x080035e0
 8000818:	200000c8 	.word	0x200000c8
 800081c:	08003604 	.word	0x08003604
 8000820:	08003624 	.word	0x08003624
 8000824:	20000000 	.word	0x20000000
 8000828:	08003648 	.word	0x08003648
 800082c:	20000130 	.word	0x20000130
 8000830:	200000cc 	.word	0x200000cc
 8000834:	20000014 	.word	0x20000014
 8000838:	08003650 	.word	0x08003650
 800083c:	200000b8 	.word	0x200000b8
 8000840:	08003668 	.word	0x08003668
 8000844:	08003680 	.word	0x08003680

08000848 <SystemClock_Config>:
  *            Main regulator output voltage  = Scale1 mode
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
void SystemClock_Config(void) {
 8000848:	b500      	push	{lr}
 800084a:	b093      	sub	sp, #76	; 0x4c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800085e:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000860:	2219      	movs	r2, #25
 8000862:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000864:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8000868:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800086c:	2309      	movs	r3, #9
 800086e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	930c      	str	r3, [sp, #48]	; 0x30

  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000874:	4668      	mov	r0, sp
 8000876:	f000 fb2b 	bl	8000ed0 <HAL_RCC_OscConfig>
  if(ret != HAL_OK) {
 800087a:	b100      	cbz	r0, 800087e <SystemClock_Config+0x36>
 800087c:	e7fe      	b.n	800087c <SystemClock_Config+0x34>
    while(1) { ; }
  }

  /* Activate the OverDrive to reach the 216 MHz Frequency */
  ret = HAL_PWREx_EnableOverDrive();
 800087e:	f000 fae9 	bl	8000e54 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK) {
 8000882:	b100      	cbz	r0, 8000886 <SystemClock_Config+0x3e>
 8000884:	e7fe      	b.n	8000884 <SystemClock_Config+0x3c>
    while(1) { ; }
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000886:	230f      	movs	r3, #15
 8000888:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000892:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000896:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089c:	9311      	str	r3, [sp, #68]	; 0x44

  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 800089e:	2107      	movs	r1, #7
 80008a0:	a80d      	add	r0, sp, #52	; 0x34
 80008a2:	f000 fd53 	bl	800134c <HAL_RCC_ClockConfig>
  if(ret != HAL_OK) {
 80008a6:	b100      	cbz	r0, 80008aa <SystemClock_Config+0x62>
 80008a8:	e7fe      	b.n	80008a8 <SystemClock_Config+0x60>
    while(1) { ; }
  }
}
 80008aa:	b013      	add	sp, #76	; 0x4c
 80008ac:	f85d fb04 	ldr.w	pc, [sp], #4

080008b0 <CPU_CACHE_Enable>:

// Enables CPU Instruction and Data Caches
void CPU_CACHE_Enable(void) {
 80008b0:	b410      	push	{r4}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <CPU_CACHE_Enable+0x7c>)
 80008bc:	2100      	movs	r1, #0
 80008be:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008d0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008da:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008e2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008e6:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80008ea:	e00f      	b.n	800090c <CPU_CACHE_Enable+0x5c>
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008ec:	461a      	mov	r2, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008f2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80008f6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80008fa:	490c      	ldr	r1, [pc, #48]	; (800092c <CPU_CACHE_Enable+0x7c>)
 80008fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000900:	1e53      	subs	r3, r2, #1
 8000902:	2a00      	cmp	r2, #0
 8000904:	d1f2      	bne.n	80008ec <CPU_CACHE_Enable+0x3c>
    } while(sets-- != 0U);
 8000906:	1e43      	subs	r3, r0, #1
 8000908:	b118      	cbz	r0, 8000912 <CPU_CACHE_Enable+0x62>
 800090a:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800090c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
 8000910:	e7ed      	b.n	80008ee <CPU_CACHE_Enable+0x3e>
 8000912:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000916:	694b      	ldr	r3, [r1, #20]
 8000918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800091c:	614b      	str	r3, [r1, #20]
 800091e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000922:	f3bf 8f6f 	isb	sy
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Sys_Init>:

// Unified System Initialization (equivalent of current MPS Sys_Init())
void Sys_Init(void) {
 8000930:	b508      	push	{r3, lr}
	//Initialize the system
	CPU_CACHE_Enable();		// Enable CPU Caching
 8000932:	f7ff ffbd 	bl	80008b0 <CPU_CACHE_Enable>
	HAL_Init();				// Initialize HAL
 8000936:	f000 f91b 	bl	8000b70 <HAL_Init>
	SystemClock_Config(); 	// Configure the system clock to 216 MHz
 800093a:	f7ff ff85 	bl	8000848 <SystemClock_Config>
		- Stop Bit = No Stop bits
		- Parity = None
		- BaudRate = 115200 baud
		- Hardware flow control disabled (RTS and CTS signals)
	*/
	initUart(&USB_UART, 115200, USART1);
 800093e:	4a03      	ldr	r2, [pc, #12]	; (800094c <Sys_Init+0x1c>)
 8000940:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <Sys_Init+0x20>)
 8000946:	f000 f873 	bl	8000a30 <initUart>
}
 800094a:	bd08      	pop	{r3, pc}
 800094c:	40011000 	.word	0x40011000
 8000950:	20000134 	.word	0x20000134

08000954 <SysTick_Handler>:

// This function is what makes everything work
// Don't touch it...
// (Increments the system clock)
void SysTick_Handler(void) {
 8000954:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000956:	f000 f921 	bl	8000b9c <HAL_IncTick>
}
 800095a:	bd08      	pop	{r3, pc}

0800095c <HAL_UART_MspInit>:
#include "uart.h"

// Initialize Hardware Resources
// Peripheral's clock enable
// Peripheral's GPIO Configuration
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 800095c:	b530      	push	{r4, r5, lr}
 800095e:	b08b      	sub	sp, #44	; 0x2c
	GPIO_InitTypeDef  GPIO_InitStruct;

	if (huart->Instance == USART1) {
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <HAL_UART_MspInit+0xc0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d004      	beq.n	8000972 <HAL_UART_MspInit+0x16>
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config

		// Enable UART Clocking
		__USART1_CLK_ENABLE();

	} else if (huart->Instance == USART6) {
 8000968:	4a2d      	ldr	r2, [pc, #180]	; (8000a20 <HAL_UART_MspInit+0xc4>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d02c      	beq.n	80009c8 <HAL_UART_MspInit+0x6c>

		// Enable UART Clocking
		__USART6_CLK_ENABLE();

	}
}
 800096e:	b00b      	add	sp, #44	; 0x2c
 8000970:	bd30      	pop	{r4, r5, pc}
		__GPIOA_CLK_ENABLE();
 8000972:	4c2c      	ldr	r4, [pc, #176]	; (8000a24 <HAL_UART_MspInit+0xc8>)
 8000974:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6323      	str	r3, [r4, #48]	; 0x30
 800097c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8000986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800098a:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000990:	2301      	movs	r3, #1
 8000992:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000998:	2307      	movs	r3, #7
 800099a:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //TX Config
 800099c:	4d22      	ldr	r5, [pc, #136]	; (8000a28 <HAL_UART_MspInit+0xcc>)
 800099e:	a905      	add	r1, sp, #20
 80009a0:	4628      	mov	r0, r5
 80009a2:	f000 f967 	bl	8000c74 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //RX Config
 80009ac:	a905      	add	r1, sp, #20
 80009ae:	4628      	mov	r0, r5
 80009b0:	f000 f960 	bl	8000c74 <HAL_GPIO_Init>
		__USART1_CLK_ENABLE();
 80009b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6463      	str	r3, [r4, #68]	; 0x44
 80009bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	9b02      	ldr	r3, [sp, #8]
 80009c6:	e7d2      	b.n	800096e <HAL_UART_MspInit+0x12>
		__GPIOC_CLK_ENABLE();
 80009c8:	4c16      	ldr	r4, [pc, #88]	; (8000a24 <HAL_UART_MspInit+0xc8>)
 80009ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6323      	str	r3, [r4, #48]	; 0x30
 80009d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	9303      	str	r3, [sp, #12]
 80009da:	9b03      	ldr	r3, [sp, #12]
		GPIO_InitStruct.Pin       = GPIO_PIN_6;
 80009dc:	2340      	movs	r3, #64	; 0x40
 80009de:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	9308      	str	r3, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80009ec:	2308      	movs	r3, #8
 80009ee:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //TX Config
 80009f0:	4d0e      	ldr	r5, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0xd0>)
 80009f2:	a905      	add	r1, sp, #20
 80009f4:	4628      	mov	r0, r5
 80009f6:	f000 f93d 	bl	8000c74 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); //RX Config
 80009fe:	a905      	add	r1, sp, #20
 8000a00:	4628      	mov	r0, r5
 8000a02:	f000 f937 	bl	8000c74 <HAL_GPIO_Init>
		__USART6_CLK_ENABLE();
 8000a06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6463      	str	r3, [r4, #68]	; 0x44
 8000a0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a10:	f003 0320 	and.w	r3, r3, #32
 8000a14:	9304      	str	r3, [sp, #16]
 8000a16:	9b04      	ldr	r3, [sp, #16]
}
 8000a18:	e7a9      	b.n	800096e <HAL_UART_MspInit+0x12>
 8000a1a:	bf00      	nop
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	40011400 	.word	0x40011400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020800 	.word	0x40020800

08000a30 <initUart>:

//UART Initialization
void initUart(UART_HandleTypeDef* Uhand, uint32_t Baud, USART_TypeDef* Tgt) {
 8000a30:	b508      	push	{r3, lr}
	Uhand->Instance        = Tgt;
 8000a32:	6002      	str	r2, [r0, #0]

	Uhand->Init.BaudRate   = Baud;
 8000a34:	6041      	str	r1, [r0, #4]
	Uhand->Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	2200      	movs	r2, #0
 8000a38:	6082      	str	r2, [r0, #8]
	Uhand->Init.StopBits   = UART_STOPBITS_1;
 8000a3a:	60c2      	str	r2, [r0, #12]
	Uhand->Init.Parity     = UART_PARITY_NONE;
 8000a3c:	6102      	str	r2, [r0, #16]
	Uhand->Init.Mode       = UART_MODE_TX_RX;
 8000a3e:	210c      	movs	r1, #12
 8000a40:	6141      	str	r1, [r0, #20]
	Uhand->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a42:	6182      	str	r2, [r0, #24]

	HAL_UART_Init(Uhand);
 8000a44:	f001 fbed 	bl	8002222 <HAL_UART_Init>
}
 8000a48:	bd08      	pop	{r3, pc}
	...

08000a4c <_write>:

============================================================================= */


// Make printf(), putchar(), etc. default to work over USB UART
int _write(int file, char *ptr, int len) {
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&USB_UART, (uint8_t*) ptr, len, 1000);
 8000a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a54:	b292      	uxth	r2, r2
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <_write+0x14>)
 8000a58:	f001 fac3 	bl	8001fe2 <HAL_UART_Transmit>
	return len;
}
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	20000134 	.word	0x20000134

08000a64 <_read>:

// Make scanf(), getchar(), etc. default to work over USB UART
int _read(int file, char *ptr, int len) {
 8000a64:	b508      	push	{r3, lr}
	*ptr = 0x00; // Clear the character buffer because scanf() is finicky
 8000a66:	2200      	movs	r2, #0
 8000a68:	700a      	strb	r2, [r1, #0]
	len = 1; // Again because of scanf's finickiness, len must = 1
	HAL_UART_Receive(&USB_UART, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <_read+0x18>)
 8000a72:	f001 fb24 	bl	80020be <HAL_UART_Receive>
	return len;
}
 8000a76:	2001      	movs	r0, #1
 8000a78:	bd08      	pop	{r3, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000134 	.word	0x20000134

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f000 f813 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f001 fda3 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fe07 	bl	80006c4 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000abc:	08003748 	.word	0x08003748
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8000ac8:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8000acc:	200001bc 	.word	0x200001bc

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <SystemInit+0x40>)
 8000ad8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <SystemInit+0x44>)
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	f041 0101 	orr.w	r1, r1, #1
 8000aec:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000aee:	2000      	movs	r0, #0
 8000af0:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	4909      	ldr	r1, [pc, #36]	; (8000b1c <SystemInit+0x48>)
 8000af6:	4021      	ands	r1, r4
 8000af8:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <SystemInit+0x4c>)
 8000afc:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000b04:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b06:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b0c:	6093      	str	r3, [r2, #8]
#endif
}
 8000b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	fef6ffff 	.word	0xfef6ffff
 8000b20:	24003010 	.word	0x24003010

08000b24 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b24:	4770      	bx	lr
	...

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_InitTick+0x40>)
 8000b2e:	7818      	ldrb	r0, [r3, #0]
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_InitTick+0x44>)
 8000b3a:	6810      	ldr	r0, [r2, #0]
 8000b3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b40:	f000 f882 	bl	8000c48 <HAL_SYSTICK_Config>
 8000b44:	b968      	cbnz	r0, 8000b62 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	2c0f      	cmp	r4, #15
 8000b48:	d901      	bls.n	8000b4e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	e00a      	b.n	8000b64 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4621      	mov	r1, r4
 8000b52:	f04f 30ff 	mov.w	r0, #4294967295
 8000b56:	f000 f845 	bl	8000be4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5a:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_InitTick+0x40>)
 8000b5c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
}
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	20000030 	.word	0x20000030
 8000b6c:	2000002c 	.word	0x2000002c

08000b70 <HAL_Init>:
{
 8000b70:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_Init+0x28>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b7a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b82:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f81b 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f7ff ffcc 	bl	8000b28 <HAL_InitTick>
  HAL_MspInit();
 8000b90:	f7ff ffc8 	bl	8000b24 <HAL_MspInit>
}
 8000b94:	2000      	movs	r0, #0
 8000b96:	bd08      	pop	{r3, pc}
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_IncTick+0x10>)
 8000b9e:	6811      	ldr	r1, [r2, #0]
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_IncTick+0x14>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200001b4 	.word	0x200001b4
 8000bb0:	20000030 	.word	0x20000030

08000bb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <HAL_GetTick+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200001b4 	.word	0x200001b4

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000bc2:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	0200      	lsls	r0, r0, #8
 8000bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bd4:	4a02      	ldr	r2, [pc, #8]	; (8000be0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bd6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000bd8:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00
 8000be0:	05fa0000 	.word	0x05fa0000

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_NVIC_SetPriority+0x58>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bee:	f1c3 0407 	rsb	r4, r3, #7
 8000bf2:	2c04      	cmp	r4, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	1d1d      	adds	r5, r3, #4
 8000bfa:	2d06      	cmp	r5, #6
 8000bfc:	d914      	bls.n	8000c28 <HAL_NVIC_SetPriority+0x44>
 8000bfe:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 35ff 	mov.w	r5, #4294967295
 8000c04:	fa05 f404 	lsl.w	r4, r5, r4
 8000c08:	ea21 0104 	bic.w	r1, r1, r4
 8000c0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0e:	fa05 f303 	lsl.w	r3, r5, r3
 8000c12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	db07      	blt.n	8000c2c <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	0109      	lsls	r1, r1, #4
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_NVIC_SetPriority+0x5c>)
 8000c22:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c24:	bc30      	pop	{r4, r5}
 8000c26:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e7e9      	b.n	8000c00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	f000 000f 	and.w	r0, r0, #15
 8000c30:	0109      	lsls	r1, r1, #4
 8000c32:	b2c9      	uxtb	r1, r1
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_NVIC_SetPriority+0x60>)
 8000c36:	5419      	strb	r1, [r3, r0]
 8000c38:	e7f4      	b.n	8000c24 <HAL_NVIC_SetPriority+0x40>
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00
 8000c40:	e000e400 	.word	0xe000e400
 8000c44:	e000ed14 	.word	0xe000ed14

08000c48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	3801      	subs	r0, #1
 8000c4a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c4e:	d20a      	bcs.n	8000c66 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_SYSTICK_Config+0x24>)
 8000c52:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_SYSTICK_Config+0x28>)
 8000c56:	21f0      	movs	r1, #240	; 0xf0
 8000c58:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	f200 80e2 	bhi.w	8000e40 <HAL_GPIO_Init+0x1cc>
{
 8000c7c:	b4f0      	push	{r4, r5, r6, r7}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	e039      	b.n	8000cf6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c82:	2209      	movs	r2, #9
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000c86:	2200      	movs	r2, #0
 8000c88:	40b2      	lsls	r2, r6
 8000c8a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c8c:	3402      	adds	r4, #2
 8000c8e:	4e6d      	ldr	r6, [pc, #436]	; (8000e44 <HAL_GPIO_Init+0x1d0>)
 8000c90:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c94:	4a6c      	ldr	r2, [pc, #432]	; (8000e48 <HAL_GPIO_Init+0x1d4>)
 8000c96:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000c98:	43ea      	mvns	r2, r5
 8000c9a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c9e:	684f      	ldr	r7, [r1, #4]
 8000ca0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000ca4:	d001      	beq.n	8000caa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000ca6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000caa:	4c67      	ldr	r4, [pc, #412]	; (8000e48 <HAL_GPIO_Init+0x1d4>)
 8000cac:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000cae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cb0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb4:	684f      	ldr	r7, [r1, #4]
 8000cb6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000cba:	d001      	beq.n	8000cc0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000cbc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000cc0:	4c61      	ldr	r4, [pc, #388]	; (8000e48 <HAL_GPIO_Init+0x1d4>)
 8000cc2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cc6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cca:	684f      	ldr	r7, [r1, #4]
 8000ccc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000cd0:	d001      	beq.n	8000cd6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000cd2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000cd6:	4c5c      	ldr	r4, [pc, #368]	; (8000e48 <HAL_GPIO_Init+0x1d4>)
 8000cd8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000cda:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000cdc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cde:	684e      	ldr	r6, [r1, #4]
 8000ce0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ce4:	d001      	beq.n	8000cea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ce6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000cea:	4c57      	ldr	r4, [pc, #348]	; (8000e48 <HAL_GPIO_Init+0x1d4>)
 8000cec:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	f200 80a2 	bhi.w	8000e3a <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	680c      	ldr	r4, [r1, #0]
 8000cfc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000d00:	42aa      	cmp	r2, r5
 8000d02:	d1f4      	bne.n	8000cee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	684c      	ldr	r4, [r1, #4]
 8000d06:	2c12      	cmp	r4, #18
 8000d08:	bf18      	it	ne
 8000d0a:	2c02      	cmpne	r4, #2
 8000d0c:	d110      	bne.n	8000d30 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000d0e:	08de      	lsrs	r6, r3, #3
 8000d10:	3608      	adds	r6, #8
 8000d12:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d16:	f003 0407 	and.w	r4, r3, #7
 8000d1a:	00a7      	lsls	r7, r4, #2
 8000d1c:	240f      	movs	r4, #15
 8000d1e:	40bc      	lsls	r4, r7
 8000d20:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d24:	690c      	ldr	r4, [r1, #16]
 8000d26:	40bc      	lsls	r4, r7
 8000d28:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d2c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000d30:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d32:	005f      	lsls	r7, r3, #1
 8000d34:	2603      	movs	r6, #3
 8000d36:	40be      	lsls	r6, r7
 8000d38:	43f6      	mvns	r6, r6
 8000d3a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d3e:	684c      	ldr	r4, [r1, #4]
 8000d40:	f004 0403 	and.w	r4, r4, #3
 8000d44:	40bc      	lsls	r4, r7
 8000d46:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000d4a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	684c      	ldr	r4, [r1, #4]
 8000d4e:	f104 3cff 	add.w	ip, r4, #4294967295
 8000d52:	2c11      	cmp	r4, #17
 8000d54:	bf18      	it	ne
 8000d56:	f1bc 0f01 	cmpne.w	ip, #1
 8000d5a:	d901      	bls.n	8000d60 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	2c12      	cmp	r4, #18
 8000d5e:	d111      	bne.n	8000d84 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000d60:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d62:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d66:	68cc      	ldr	r4, [r1, #12]
 8000d68:	40bc      	lsls	r4, r7
 8000d6a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000d6e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d70:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d72:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d76:	684c      	ldr	r4, [r1, #4]
 8000d78:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000d82:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d84:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d86:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d88:	688a      	ldr	r2, [r1, #8]
 8000d8a:	40ba      	lsls	r2, r7
 8000d8c:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000d8e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d90:	684a      	ldr	r2, [r1, #4]
 8000d92:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000d96:	d0aa      	beq.n	8000cee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <HAL_GPIO_Init+0x1d8>)
 8000d9a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000d9c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000da0:	6454      	str	r4, [r2, #68]	; 0x44
 8000da2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000da4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000dac:	089c      	lsrs	r4, r3, #2
 8000dae:	1ca6      	adds	r6, r4, #2
 8000db0:	4a24      	ldr	r2, [pc, #144]	; (8000e44 <HAL_GPIO_Init+0x1d0>)
 8000db2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	0096      	lsls	r6, r2, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	40b2      	lsls	r2, r6
 8000dc0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dc4:	4a22      	ldr	r2, [pc, #136]	; (8000e50 <HAL_GPIO_Init+0x1dc>)
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	f43f af5d 	beq.w	8000c86 <HAL_GPIO_Init+0x12>
 8000dcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	d022      	beq.n	8000e1a <HAL_GPIO_Init+0x1a6>
 8000dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dd8:	4290      	cmp	r0, r2
 8000dda:	d020      	beq.n	8000e1e <HAL_GPIO_Init+0x1aa>
 8000ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de0:	4290      	cmp	r0, r2
 8000de2:	d01e      	beq.n	8000e22 <HAL_GPIO_Init+0x1ae>
 8000de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000de8:	4290      	cmp	r0, r2
 8000dea:	d01c      	beq.n	8000e26 <HAL_GPIO_Init+0x1b2>
 8000dec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d01a      	beq.n	8000e2a <HAL_GPIO_Init+0x1b6>
 8000df4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	d018      	beq.n	8000e2e <HAL_GPIO_Init+0x1ba>
 8000dfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e00:	4290      	cmp	r0, r2
 8000e02:	d016      	beq.n	8000e32 <HAL_GPIO_Init+0x1be>
 8000e04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e08:	4290      	cmp	r0, r2
 8000e0a:	d014      	beq.n	8000e36 <HAL_GPIO_Init+0x1c2>
 8000e0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e10:	4290      	cmp	r0, r2
 8000e12:	f43f af36 	beq.w	8000c82 <HAL_GPIO_Init+0xe>
 8000e16:	220a      	movs	r2, #10
 8000e18:	e736      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	e734      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e1e:	2202      	movs	r2, #2
 8000e20:	e732      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e22:	2203      	movs	r2, #3
 8000e24:	e730      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e26:	2204      	movs	r2, #4
 8000e28:	e72e      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	e72c      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e2e:	2206      	movs	r2, #6
 8000e30:	e72a      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e32:	2207      	movs	r2, #7
 8000e34:	e728      	b.n	8000c88 <HAL_GPIO_Init+0x14>
 8000e36:	2208      	movs	r2, #8
 8000e38:	e726      	b.n	8000c88 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e3e:	4770      	bx	lr
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40013800 	.word	0x40013800
 8000e48:	40013c00 	.word	0x40013c00
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000e54:	b510      	push	{r4, lr}
 8000e56:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_PWREx_EnableOverDrive+0x74>)
 8000e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_PWREx_EnableOverDrive+0x78>)
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e76:	f7ff fe9d 	bl	8000bb4 <HAL_GetTick>
 8000e7a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_PWREx_EnableOverDrive+0x78>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000e84:	d108      	bne.n	8000e98 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000e86:	f7ff fe95 	bl	8000bb4 <HAL_GetTick>
 8000e8a:	1b00      	subs	r0, r0, r4
 8000e8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e90:	d9f4      	bls.n	8000e7c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8000e92:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8000e94:	b002      	add	sp, #8
 8000e96:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <HAL_PWREx_EnableOverDrive+0x78>)
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000ea2:	f7ff fe87 	bl	8000bb4 <HAL_GetTick>
 8000ea6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <HAL_PWREx_EnableOverDrive+0x78>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000eb0:	d107      	bne.n	8000ec2 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eb2:	f7ff fe7f 	bl	8000bb4 <HAL_GetTick>
 8000eb6:	1b00      	subs	r0, r0, r4
 8000eb8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ebc:	d9f4      	bls.n	8000ea8 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	e7e8      	b.n	8000e94 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	e7e6      	b.n	8000e94 <HAL_PWREx_EnableOverDrive+0x40>
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f000 81dc 	beq.w	800128e <HAL_RCC_OscConfig+0x3be>
{
 8000ed6:	b570      	push	{r4, r5, r6, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	f013 0f01 	tst.w	r3, #1
 8000ee2:	d029      	beq.n	8000f38 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee4:	4ba2      	ldr	r3, [pc, #648]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d01a      	beq.n	8000f26 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef0:	4b9f      	ldr	r3, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d00f      	beq.n	8000f1c <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f02:	d040      	beq.n	8000f86 <HAL_RCC_OscConfig+0xb6>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d154      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xe2>
 8000f08:	4b99      	ldr	r3, [pc, #612]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e039      	b.n	8000f90 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1c:	4b94      	ldr	r3, [pc, #592]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f24:	d0ea      	beq.n	8000efc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f2e:	d003      	beq.n	8000f38 <HAL_RCC_OscConfig+0x68>
 8000f30:	6863      	ldr	r3, [r4, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 81ad 	beq.w	8001292 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	f013 0f02 	tst.w	r3, #2
 8000f3e:	d075      	beq.n	800102c <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f40:	4b8b      	ldr	r3, [pc, #556]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f013 0f0c 	tst.w	r3, #12
 8000f48:	d05e      	beq.n	8001008 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f4a:	4b89      	ldr	r3, [pc, #548]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d053      	beq.n	8000ffe <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f56:	68e3      	ldr	r3, [r4, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 808a 	beq.w	8001072 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5e:	4a84      	ldr	r2, [pc, #528]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f60:	6813      	ldr	r3, [r2, #0]
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fe24 	bl	8000bb4 <HAL_GetTick>
 8000f6c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	4b80      	ldr	r3, [pc, #512]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f013 0f02 	tst.w	r3, #2
 8000f76:	d173      	bne.n	8001060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f78:	f7ff fe1c 	bl	8000bb4 <HAL_GetTick>
 8000f7c:	1b40      	subs	r0, r0, r5
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f5      	bls.n	8000f6e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000f82:	2003      	movs	r0, #3
 8000f84:	e188      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	4a7a      	ldr	r2, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	b32b      	cbz	r3, 8000fe0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000f94:	f7ff fe0e 	bl	8000bb4 <HAL_GetTick>
 8000f98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b75      	ldr	r3, [pc, #468]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fa2:	d1c9      	bne.n	8000f38 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fe06 	bl	8000bb4 <HAL_GetTick>
 8000fa8:	1b40      	subs	r0, r0, r5
 8000faa:	2864      	cmp	r0, #100	; 0x64
 8000fac:	d9f5      	bls.n	8000f9a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e172      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb6:	d009      	beq.n	8000fcc <HAL_RCC_OscConfig+0xfc>
 8000fb8:	4b6d      	ldr	r3, [pc, #436]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e7e1      	b.n	8000f90 <HAL_RCC_OscConfig+0xc0>
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e7d7      	b.n	8000f90 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fde8 	bl	8000bb4 <HAL_GetTick>
 8000fe4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fee:	d0a3      	beq.n	8000f38 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fde0 	bl	8000bb4 <HAL_GetTick>
 8000ff4:	1b40      	subs	r0, r0, r5
 8000ff6:	2864      	cmp	r0, #100	; 0x64
 8000ff8:	d9f5      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	e14c      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffe:	4b5c      	ldr	r3, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001006:	d1a6      	bne.n	8000f56 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f013 0f02 	tst.w	r3, #2
 8001010:	d004      	beq.n	800101c <HAL_RCC_OscConfig+0x14c>
 8001012:	68e3      	ldr	r3, [r4, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d001      	beq.n	800101c <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8001018:	2001      	movs	r0, #1
 800101a:	e13d      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101c:	4a54      	ldr	r2, [pc, #336]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001024:	6921      	ldr	r1, [r4, #16]
 8001026:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800102a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	f013 0f08 	tst.w	r3, #8
 8001032:	d046      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001034:	6963      	ldr	r3, [r4, #20]
 8001036:	b383      	cbz	r3, 800109a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001038:	4a4d      	ldr	r2, [pc, #308]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 800103a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001042:	f7ff fdb7 	bl	8000bb4 <HAL_GetTick>
 8001046:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001048:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 800104a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104c:	f013 0f02 	tst.w	r3, #2
 8001050:	d137      	bne.n	80010c2 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001052:	f7ff fdaf 	bl	8000bb4 <HAL_GetTick>
 8001056:	1b40      	subs	r0, r0, r5
 8001058:	2802      	cmp	r0, #2
 800105a:	d9f5      	bls.n	8001048 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e11b      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4a43      	ldr	r2, [pc, #268]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001068:	6921      	ldr	r1, [r4, #16]
 800106a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e7dc      	b.n	800102c <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8001072:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f023 0301 	bic.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800107c:	f7ff fd9a 	bl	8000bb4 <HAL_GetTick>
 8001080:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f013 0f02 	tst.w	r3, #2
 800108a:	d0cf      	beq.n	800102c <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fd92 	bl	8000bb4 <HAL_GetTick>
 8001090:	1b40      	subs	r0, r0, r5
 8001092:	2802      	cmp	r0, #2
 8001094:	d9f5      	bls.n	8001082 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e0fe      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800109a:	4a35      	ldr	r2, [pc, #212]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 800109c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	f7ff fd86 	bl	8000bb4 <HAL_GetTick>
 80010a8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 80010ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010ae:	f013 0f02 	tst.w	r3, #2
 80010b2:	d006      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fd7e 	bl	8000bb4 <HAL_GetTick>
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d9f5      	bls.n	80010aa <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 80010be:	2003      	movs	r0, #3
 80010c0:	e0ea      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	f013 0f04 	tst.w	r3, #4
 80010c8:	d07e      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010d2:	d11e      	bne.n	8001112 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 80010d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010e8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_RCC_OscConfig+0x2a4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010f2:	d010      	beq.n	8001116 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f4:	68a3      	ldr	r3, [r4, #8]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d021      	beq.n	800113e <HAL_RCC_OscConfig+0x26e>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d13c      	bne.n	8001178 <HAL_RCC_OscConfig+0x2a8>
 80010fe:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	671a      	str	r2, [r3, #112]	; 0x70
 8001108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800110a:	f022 0204 	bic.w	r2, r2, #4
 800110e:	671a      	str	r2, [r3, #112]	; 0x70
 8001110:	e01a      	b.n	8001148 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8001112:	2500      	movs	r5, #0
 8001114:	e7e9      	b.n	80010ea <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <HAL_RCC_OscConfig+0x2a4>)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001120:	f7ff fd48 	bl	8000bb4 <HAL_GetTick>
 8001124:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_RCC_OscConfig+0x2a4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800112e:	d1e1      	bne.n	80010f4 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001130:	f7ff fd40 	bl	8000bb4 <HAL_GetTick>
 8001134:	1b80      	subs	r0, r0, r6
 8001136:	2864      	cmp	r0, #100	; 0x64
 8001138:	d9f5      	bls.n	8001126 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
 800113c:	e0ac      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001140:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001148:	68a3      	ldr	r3, [r4, #8]
 800114a:	b35b      	cbz	r3, 80011a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114c:	f7ff fd32 	bl	8000bb4 <HAL_GetTick>
 8001150:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_RCC_OscConfig+0x2a0>)
 8001154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001156:	f013 0f02 	tst.w	r3, #2
 800115a:	d134      	bne.n	80011c6 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800115c:	f7ff fd2a 	bl	8000bb4 <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	f241 3388 	movw	r3, #5000	; 0x1388
 8001166:	4298      	cmp	r0, r3
 8001168:	d9f3      	bls.n	8001152 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800116a:	2003      	movs	r0, #3
 800116c:	e094      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	2b05      	cmp	r3, #5
 800117a:	d009      	beq.n	8001190 <HAL_RCC_OscConfig+0x2c0>
 800117c:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 800117e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001180:	f022 0201 	bic.w	r2, r2, #1
 8001184:	671a      	str	r2, [r3, #112]	; 0x70
 8001186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001188:	f022 0204 	bic.w	r2, r2, #4
 800118c:	671a      	str	r2, [r3, #112]	; 0x70
 800118e:	e7db      	b.n	8001148 <HAL_RCC_OscConfig+0x278>
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 8001192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001194:	f042 0204 	orr.w	r2, r2, #4
 8001198:	671a      	str	r2, [r3, #112]	; 0x70
 800119a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	671a      	str	r2, [r3, #112]	; 0x70
 80011a2:	e7d1      	b.n	8001148 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a4:	f7ff fd06 	bl	8000bb4 <HAL_GetTick>
 80011a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 80011ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ae:	f013 0f02 	tst.w	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b4:	f7ff fcfe 	bl	8000bb4 <HAL_GetTick>
 80011b8:	1b80      	subs	r0, r0, r6
 80011ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80011be:	4298      	cmp	r0, r3
 80011c0:	d9f3      	bls.n	80011aa <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 80011c2:	2003      	movs	r0, #3
 80011c4:	e068      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c6:	b9f5      	cbnz	r5, 8001206 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c8:	69a3      	ldr	r3, [r4, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d063      	beq.n	8001296 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ce:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 80011d0:	6892      	ldr	r2, [r2, #8]
 80011d2:	f002 020c 	and.w	r2, r2, #12
 80011d6:	2a08      	cmp	r2, #8
 80011d8:	d060      	beq.n	800129c <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d019      	beq.n	8001212 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fce4 	bl	8000bb4 <HAL_GetTick>
 80011ec:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011f6:	d048      	beq.n	800128a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f8:	f7ff fcdc 	bl	8000bb4 <HAL_GetTick>
 80011fc:	1b00      	subs	r0, r0, r4
 80011fe:	2802      	cmp	r0, #2
 8001200:	d9f5      	bls.n	80011ee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001202:	2003      	movs	r0, #3
 8001204:	e048      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 8001208:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800120a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120e:	6413      	str	r3, [r2, #64]	; 0x40
 8001210:	e7da      	b.n	80011c8 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800121a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800121c:	f7ff fcca 	bl	8000bb4 <HAL_GetTick>
 8001220:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800122a:	d006      	beq.n	800123a <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800122c:	f7ff fcc2 	bl	8000bb4 <HAL_GetTick>
 8001230:	1b40      	subs	r0, r0, r5
 8001232:	2802      	cmp	r0, #2
 8001234:	d9f5      	bls.n	8001222 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8001236:	2003      	movs	r0, #3
 8001238:	e02e      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123a:	69e3      	ldr	r3, [r4, #28]
 800123c:	6a22      	ldr	r2, [r4, #32]
 800123e:	4313      	orrs	r3, r2
 8001240:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001242:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001248:	0852      	lsrs	r2, r2, #1
 800124a:	3a01      	subs	r2, #1
 800124c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001252:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001256:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001258:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800125c:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 800125e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001268:	f7ff fca4 	bl	8000bb4 <HAL_GetTick>
 800126c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_RCC_OscConfig+0x3d0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001276:	d106      	bne.n	8001286 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001278:	f7ff fc9c 	bl	8000bb4 <HAL_GetTick>
 800127c:	1b00      	subs	r0, r0, r4
 800127e:	2802      	cmp	r0, #2
 8001280:	d9f5      	bls.n	800126e <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8001282:	2003      	movs	r0, #3
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001286:	2000      	movs	r0, #0
 8001288:	e006      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
 800128a:	2000      	movs	r0, #0
 800128c:	e004      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
}
 8001290:	4770      	bx	lr
        return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	e000      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001296:	2000      	movs	r0, #0
}
 8001298:	b002      	add	sp, #8
 800129a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
 800129e:	e7fb      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d044      	beq.n	800133a <HAL_RCC_GetSysClockFreq+0x96>
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b4:	4823      	ldr	r0, [pc, #140]	; (8001344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012b6:	4770      	bx	lr
{
 80012b8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012d4:	2300      	movs	r3, #0
 80012d6:	481c      	ldr	r0, [pc, #112]	; (8001348 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012d8:	fba1 0100 	umull	r0, r1, r1, r0
 80012dc:	f7ff f800 	bl	80002e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012e8:	3301      	adds	r3, #1
 80012ea:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80012ec:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012f0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80012fc:	461e      	mov	r6, r3
 80012fe:	2700      	movs	r7, #0
 8001300:	015c      	lsls	r4, r3, #5
 8001302:	2500      	movs	r5, #0
 8001304:	1ae4      	subs	r4, r4, r3
 8001306:	eb65 0507 	sbc.w	r5, r5, r7
 800130a:	01a9      	lsls	r1, r5, #6
 800130c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001310:	01a0      	lsls	r0, r4, #6
 8001312:	1b00      	subs	r0, r0, r4
 8001314:	eb61 0105 	sbc.w	r1, r1, r5
 8001318:	00cb      	lsls	r3, r1, #3
 800131a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800131e:	00c4      	lsls	r4, r0, #3
 8001320:	19a0      	adds	r0, r4, r6
 8001322:	eb43 0107 	adc.w	r1, r3, r7
 8001326:	028b      	lsls	r3, r1, #10
 8001328:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800132c:	0284      	lsls	r4, r0, #10
 800132e:	4620      	mov	r0, r4
 8001330:	4619      	mov	r1, r3
 8001332:	2300      	movs	r3, #0
 8001334:	f7fe ffd4 	bl	80002e0 <__aeabi_uldivmod>
 8001338:	e7d2      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800133a:	4803      	ldr	r0, [pc, #12]	; (8001348 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	00f42400 	.word	0x00f42400
 8001348:	017d7840 	.word	0x017d7840

0800134c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 80a2 	beq.w	8001496 <HAL_RCC_ClockConfig+0x14a>
{
 8001352:	b570      	push	{r4, r5, r6, lr}
 8001354:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <HAL_RCC_ClockConfig+0x154>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	428b      	cmp	r3, r1
 8001360:	d20c      	bcs.n	800137c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_RCC_ClockConfig+0x154>)
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	f023 030f 	bic.w	r3, r3, #15
 800136a:	430b      	orrs	r3, r1
 800136c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	428b      	cmp	r3, r1
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
}
 800137a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	f013 0f02 	tst.w	r3, #2
 8001382:	d017      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001384:	f013 0f04 	tst.w	r3, #4
 8001388:	d004      	beq.n	8001394 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138a:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001392:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	f013 0f08 	tst.w	r3, #8
 800139a:	d004      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 800139e:	6893      	ldr	r3, [r2, #8]
 80013a0:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 80013a8:	6893      	ldr	r3, [r2, #8]
 80013aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ae:	68a0      	ldr	r0, [r4, #8]
 80013b0:	4303      	orrs	r3, r0
 80013b2:	6093      	str	r3, [r2, #8]
 80013b4:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	f013 0f01 	tst.w	r3, #1
 80013bc:	d031      	beq.n	8001422 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013be:	6863      	ldr	r3, [r4, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d025      	beq.n	8001414 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	f012 0f02 	tst.w	r2, #2
 80013d0:	d063      	beq.n	800149a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013d2:	4934      	ldr	r1, [pc, #208]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 80013d4:	688a      	ldr	r2, [r1, #8]
 80013d6:	f022 0203 	bic.w	r2, r2, #3
 80013da:	4313      	orrs	r3, r2
 80013dc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80013de:	f7ff fbe9 	bl	8000bb4 <HAL_GetTick>
 80013e2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	6862      	ldr	r2, [r4, #4]
 80013ee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013f2:	d016      	beq.n	8001422 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f4:	f7ff fbde 	bl	8000bb4 <HAL_GetTick>
 80013f8:	1b80      	subs	r0, r0, r6
 80013fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80013fe:	4298      	cmp	r0, r3
 8001400:	d9f0      	bls.n	80013e4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001402:	2003      	movs	r0, #3
 8001404:	e7b9      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800140e:	d1e0      	bne.n	80013d2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
 8001412:	e7b2      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800141c:	d1d9      	bne.n	80013d2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
 8001420:	e7ab      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001422:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_RCC_ClockConfig+0x154>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	42ab      	cmp	r3, r5
 800142c:	d90c      	bls.n	8001448 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <HAL_RCC_ClockConfig+0x154>)
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f023 030f 	bic.w	r3, r3, #15
 8001436:	432b      	orrs	r3, r5
 8001438:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	42ab      	cmp	r3, r5
 8001442:	d001      	beq.n	8001448 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001444:	2001      	movs	r0, #1
 8001446:	e798      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	f013 0f04 	tst.w	r3, #4
 800144e:	d006      	beq.n	800145e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 8001452:	6893      	ldr	r3, [r2, #8]
 8001454:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001458:	68e1      	ldr	r1, [r4, #12]
 800145a:	430b      	orrs	r3, r1
 800145c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	f013 0f08 	tst.w	r3, #8
 8001464:	d007      	beq.n	8001476 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 8001468:	6893      	ldr	r3, [r2, #8]
 800146a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800146e:	6921      	ldr	r1, [r4, #16]
 8001470:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001474:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001476:	f7ff ff15 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_RCC_ClockConfig+0x158>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_RCC_ClockConfig+0x15c>)
 8001484:	5cd3      	ldrb	r3, [r2, r3]
 8001486:	40d8      	lsrs	r0, r3
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_RCC_ClockConfig+0x160>)
 800148a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148c:	200f      	movs	r0, #15
 800148e:	f7ff fb4b 	bl	8000b28 <HAL_InitTick>
  return HAL_OK;
 8001492:	2000      	movs	r0, #0
 8001494:	e771      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001496:	2001      	movs	r0, #1
}
 8001498:	4770      	bx	lr
        return HAL_ERROR;
 800149a:	2001      	movs	r0, #1
 800149c:	e76d      	b.n	800137a <HAL_RCC_ClockConfig+0x2e>
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	080034d0 	.word	0x080034d0
 80014ac:	2000002c 	.word	0x2000002c

080014b0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2000002c 	.word	0x2000002c

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014be:	f7ff fff7 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014ca:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ce:	40d8      	lsrs	r0, r3
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	080034e0 	.word	0x080034e0

080014dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014dc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014de:	f7ff ffe7 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014ea:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014ec:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ee:	40d8      	lsrs	r0, r3
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	080034e0 	.word	0x080034e0

080014fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	4605      	mov	r5, r0
 8001500:	460f      	mov	r7, r1
 8001502:	4616      	mov	r6, r2
 8001504:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	ea37 0303 	bics.w	r3, r7, r3
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	42b3      	cmp	r3, r6
 8001516:	d037      	beq.n	8001588 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001518:	f1b4 3fff 	cmp.w	r4, #4294967295
 800151c:	d0f3      	beq.n	8001506 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800151e:	f7ff fb49 	bl	8000bb4 <HAL_GetTick>
 8001522:	9b06      	ldr	r3, [sp, #24]
 8001524:	1ac0      	subs	r0, r0, r3
 8001526:	42a0      	cmp	r0, r4
 8001528:	d201      	bcs.n	800152e <SPI_WaitFlagStateUntilTimeout+0x32>
 800152a:	2c00      	cmp	r4, #0
 800152c:	d1eb      	bne.n	8001506 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800152e:	682a      	ldr	r2, [r5, #0]
 8001530:	6853      	ldr	r3, [r2, #4]
 8001532:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001536:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001538:	686b      	ldr	r3, [r5, #4]
 800153a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800153e:	d00b      	beq.n	8001558 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001540:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001546:	d014      	beq.n	8001572 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001548:	2301      	movs	r3, #1
 800154a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800154e:	2300      	movs	r3, #0
 8001550:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001554:	2003      	movs	r0, #3
 8001556:	e018      	b.n	800158a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001558:	68ab      	ldr	r3, [r5, #8]
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155e:	bf18      	it	ne
 8001560:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 8001564:	d1ec      	bne.n	8001540 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8001566:	682a      	ldr	r2, [r5, #0]
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e7e6      	b.n	8001540 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8001572:	682a      	ldr	r2, [r5, #0]
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	682a      	ldr	r2, [r5, #0]
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e7df      	b.n	8001548 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8001588:	2000      	movs	r0, #0
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800158c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	4607      	mov	r7, r0
 8001590:	460d      	mov	r5, r1
 8001592:	4614      	mov	r4, r2
 8001594:	461e      	mov	r6, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001596:	e002      	b.n	800159e <SPI_WaitFifoStateUntilTimeout+0x12>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8001598:	f1b6 3fff 	cmp.w	r6, #4294967295
 800159c:	d10b      	bne.n	80015b6 <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	6893      	ldr	r3, [r2, #8]
 80015a2:	402b      	ands	r3, r5
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d03b      	beq.n	8001620 <SPI_WaitFifoStateUntilTimeout+0x94>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80015a8:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 80015ac:	bf08      	it	eq
 80015ae:	2c00      	cmpeq	r4, #0
 80015b0:	d1f2      	bne.n	8001598 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80015b2:	7b13      	ldrb	r3, [r2, #12]
 80015b4:	e7f0      	b.n	8001598 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80015b6:	f7ff fafd 	bl	8000bb4 <HAL_GetTick>
 80015ba:	9b06      	ldr	r3, [sp, #24]
 80015bc:	1ac0      	subs	r0, r0, r3
 80015be:	42b0      	cmp	r0, r6
 80015c0:	d201      	bcs.n	80015c6 <SPI_WaitFifoStateUntilTimeout+0x3a>
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	d1eb      	bne.n	800159e <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6853      	ldr	r3, [r2, #4]
 80015ca:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80015ce:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015d6:	d00b      	beq.n	80015f0 <SPI_WaitFifoStateUntilTimeout+0x64>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015de:	d014      	beq.n	800160a <SPI_WaitFifoStateUntilTimeout+0x7e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 80015ec:	2003      	movs	r0, #3
 80015ee:	e018      	b.n	8001622 <SPI_WaitFifoStateUntilTimeout+0x96>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f6:	bf18      	it	ne
 80015f8:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 80015fc:	d1ec      	bne.n	80015d8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          __HAL_SPI_DISABLE(hspi);
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e7e6      	b.n	80015d8 <SPI_WaitFifoStateUntilTimeout+0x4c>
          SPI_RESET_CRC(hspi);
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e7df      	b.n	80015e0 <SPI_WaitFifoStateUntilTimeout+0x54>
      }
    }
  }

  return HAL_OK;
 8001620:	2000      	movs	r0, #0
}
 8001622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	4604      	mov	r4, r0
 800162a:	460d      	mov	r5, r1
 800162c:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800162e:	9200      	str	r2, [sp, #0]
 8001630:	460b      	mov	r3, r1
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001638:	f7ff ffa8 	bl	800158c <SPI_WaitFifoStateUntilTimeout>
 800163c:	b9b8      	cbnz	r0, 800166e <SPI_EndRxTxTransaction+0x4a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800163e:	9600      	str	r6, [sp, #0]
 8001640:	462b      	mov	r3, r5
 8001642:	2200      	movs	r2, #0
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff58 	bl	80014fc <SPI_WaitFlagStateUntilTimeout>
 800164c:	b9b8      	cbnz	r0, 800167e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800164e:	9600      	str	r6, [sp, #0]
 8001650:	462b      	mov	r3, r5
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff ff97 	bl	800158c <SPI_WaitFifoStateUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	b150      	cbz	r0, 8001678 <SPI_EndRxTxTransaction+0x54>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001662:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e004      	b.n	8001678 <SPI_EndRxTxTransaction+0x54>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800166e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
  }

  return HAL_OK;
}
 8001678:	4618      	mov	r0, r3
 800167a:	b002      	add	sp, #8
 800167c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800167e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e7f6      	b.n	8001678 <SPI_EndRxTxTransaction+0x54>

0800168a <HAL_SPI_Init>:
  if (hspi == NULL)
 800168a:	2800      	cmp	r0, #0
 800168c:	d067      	beq.n	800175e <HAL_SPI_Init+0xd4>
{
 800168e:	b510      	push	{r4, lr}
 8001690:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001692:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001696:	2b00      	cmp	r3, #0
 8001698:	d04c      	beq.n	8001734 <HAL_SPI_Init+0xaa>
  hspi->State = HAL_SPI_STATE_BUSY;
 800169a:	2302      	movs	r3, #2
 800169c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80016a0:	6822      	ldr	r2, [r4, #0]
 80016a2:	6813      	ldr	r3, [r2, #0]
 80016a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016a8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016aa:	68e3      	ldr	r3, [r4, #12]
 80016ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80016b0:	d945      	bls.n	800173e <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80016b2:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80016b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80016b8:	bf18      	it	ne
 80016ba:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 80016be:	d001      	beq.n	80016c4 <HAL_SPI_Init+0x3a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	2100      	movs	r1, #0
 80016c2:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80016c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80016c6:	b921      	cbnz	r1, 80016d2 <HAL_SPI_Init+0x48>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80016c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80016cc:	d93a      	bls.n	8001744 <HAL_SPI_Init+0xba>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80016ce:	2302      	movs	r3, #2
 80016d0:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80016d2:	6863      	ldr	r3, [r4, #4]
 80016d4:	68a1      	ldr	r1, [r4, #8]
 80016d6:	430b      	orrs	r3, r1
 80016d8:	6921      	ldr	r1, [r4, #16]
 80016da:	430b      	orrs	r3, r1
 80016dc:	6961      	ldr	r1, [r4, #20]
 80016de:	430b      	orrs	r3, r1
 80016e0:	69a1      	ldr	r1, [r4, #24]
 80016e2:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80016e6:	430b      	orrs	r3, r1
 80016e8:	69e1      	ldr	r1, [r4, #28]
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6a21      	ldr	r1, [r4, #32]
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016f2:	6821      	ldr	r1, [r4, #0]
 80016f4:	4303      	orrs	r3, r0
 80016f6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80016f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d025      	beq.n	800174a <HAL_SPI_Init+0xc0>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80016fe:	8b63      	ldrh	r3, [r4, #26]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001706:	430b      	orrs	r3, r1
 8001708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800170a:	430b      	orrs	r3, r1
 800170c:	68e1      	ldr	r1, [r4, #12]
 800170e:	430b      	orrs	r3, r1
 8001710:	6821      	ldr	r1, [r4, #0]
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001716:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171c:	d01b      	beq.n	8001756 <HAL_SPI_Init+0xcc>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	69d3      	ldr	r3, [r2, #28]
 8001722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001726:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001728:	2000      	movs	r0, #0
 800172a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800172c:	2301      	movs	r3, #1
 800172e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8001732:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001734:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001738:	f7fe ff6a 	bl	8000610 <HAL_SPI_MspInit>
 800173c:	e7ad      	b.n	800169a <HAL_SPI_Init+0x10>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800173e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001742:	e7b7      	b.n	80016b4 <HAL_SPI_Init+0x2a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001744:	2301      	movs	r3, #1
 8001746:	6323      	str	r3, [r4, #48]	; 0x30
 8001748:	e7c3      	b.n	80016d2 <HAL_SPI_Init+0x48>
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 800174a:	6821      	ldr	r1, [r4, #0]
 800174c:	680b      	ldr	r3, [r1, #0]
 800174e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e7d3      	b.n	80016fe <HAL_SPI_Init+0x74>
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	e7df      	b.n	800171e <HAL_SPI_Init+0x94>
    return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
}
 8001760:	4770      	bx	lr

08001762 <HAL_SPI_TransmitReceive>:
{
 8001762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001766:	b083      	sub	sp, #12
 8001768:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800176c:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8001770:	2c01      	cmp	r4, #1
 8001772:	f000 81e7 	beq.w	8001b44 <HAL_SPI_TransmitReceive+0x3e2>
 8001776:	461d      	mov	r5, r3
 8001778:	4617      	mov	r7, r2
 800177a:	460e      	mov	r6, r1
 800177c:	4604      	mov	r4, r0
 800177e:	2301      	movs	r3, #1
 8001780:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001784:	f7ff fa16 	bl	8000bb4 <HAL_GetTick>
 8001788:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800178a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800178e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001790:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	f8d2 a000 	ldr.w	sl, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8001798:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800179c:	2b01      	cmp	r3, #1
 800179e:	d015      	beq.n	80017cc <HAL_SPI_TransmitReceive+0x6a>
 80017a0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80017a4:	d00a      	beq.n	80017bc <HAL_SPI_TransmitReceive+0x5a>
    errorcode = HAL_BUSY;
 80017a6:	2502      	movs	r5, #2
  hspi->State = HAL_SPI_STATE_READY;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80017b4:	4628      	mov	r0, r5
 80017b6:	b003      	add	sp, #12
 80017b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80017bc:	68a1      	ldr	r1, [r4, #8]
 80017be:	2900      	cmp	r1, #0
 80017c0:	f040 81b4 	bne.w	8001b2c <HAL_SPI_TransmitReceive+0x3ca>
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d001      	beq.n	80017cc <HAL_SPI_TransmitReceive+0x6a>
    errorcode = HAL_BUSY;
 80017c8:	2502      	movs	r5, #2
 80017ca:	e7ed      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017cc:	fab7 f387 	clz	r3, r7
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	bf08      	it	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 81a9 	bne.w	8001b30 <HAL_SPI_TransmitReceive+0x3ce>
 80017de:	2d00      	cmp	r5, #0
 80017e0:	f000 81a8 	beq.w	8001b34 <HAL_SPI_TransmitReceive+0x3d2>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d002      	beq.n	80017f4 <HAL_SPI_TransmitReceive+0x92>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017ee:	2305      	movs	r3, #5
 80017f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017f8:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80017fa:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80017fe:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001802:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001804:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001806:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8001808:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800180a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800180c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800180e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001812:	d028      	beq.n	8001866 <HAL_SPI_TransmitReceive+0x104>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001814:	68e3      	ldr	r3, [r4, #12]
 8001816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800181a:	d801      	bhi.n	8001820 <HAL_SPI_TransmitReceive+0xbe>
 800181c:	2d01      	cmp	r5, #1
 800181e:	d92c      	bls.n	800187a <HAL_SPI_TransmitReceive+0x118>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001820:	6822      	ldr	r2, [r4, #0]
 8001822:	6853      	ldr	r3, [r2, #4]
 8001824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001828:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001832:	d103      	bne.n	800183c <HAL_SPI_TransmitReceive+0xda>
    __HAL_SPI_ENABLE(hspi);
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800183a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001842:	d97b      	bls.n	800193c <HAL_SPI_TransmitReceive+0x1da>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001844:	6863      	ldr	r3, [r4, #4]
 8001846:	b10b      	cbz	r3, 800184c <HAL_SPI_TransmitReceive+0xea>
 8001848:	2d01      	cmp	r5, #1
 800184a:	d10a      	bne.n	8001862 <HAL_SPI_TransmitReceive+0x100>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800184c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001854:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001856:	3302      	adds	r3, #2
 8001858:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800185a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001862:	2501      	movs	r5, #1
 8001864:	e042      	b.n	80018ec <HAL_SPI_TransmitReceive+0x18a>
    SPI_RESET_CRC(hspi);
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	6822      	ldr	r2, [r4, #0]
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e7cc      	b.n	8001814 <HAL_SPI_TransmitReceive+0xb2>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800187a:	6822      	ldr	r2, [r4, #0]
 800187c:	6853      	ldr	r3, [r2, #4]
 800187e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001882:	6053      	str	r3, [r2, #4]
 8001884:	e7d1      	b.n	800182a <HAL_SPI_TransmitReceive+0xc8>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8001886:	f01a 0f04 	tst.w	sl, #4
 800188a:	d107      	bne.n	800189c <HAL_SPI_TransmitReceive+0x13a>
 800188c:	f01b 0f08 	tst.w	fp, #8
 8001890:	d004      	beq.n	800189c <HAL_SPI_TransmitReceive+0x13a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8001892:	6822      	ldr	r2, [r4, #0]
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800189c:	6822      	ldr	r2, [r4, #0]
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a4:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80018a6:	2500      	movs	r5, #0
 80018a8:	e000      	b.n	80018ac <HAL_SPI_TransmitReceive+0x14a>
 80018aa:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	f012 0f01 	tst.w	r2, #1
 80018b4:	d010      	beq.n	80018d8 <HAL_SPI_TransmitReceive+0x176>
 80018b6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80018ba:	b292      	uxth	r2, r2
 80018bc:	b162      	cbz	r2, 80018d8 <HAL_SPI_TransmitReceive+0x176>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018c6:	3302      	adds	r3, #2
 80018c8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80018ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80018d6:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018d8:	f7ff f96c 	bl	8000bb4 <HAL_GetTick>
 80018dc:	eba0 0009 	sub.w	r0, r0, r9
 80018e0:	4540      	cmp	r0, r8
 80018e2:	d303      	bcc.n	80018ec <HAL_SPI_TransmitReceive+0x18a>
 80018e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80018e8:	f040 8126 	bne.w	8001b38 <HAL_SPI_TransmitReceive+0x3d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b92b      	cbnz	r3, 80018fe <HAL_SPI_TransmitReceive+0x19c>
 80018f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80cb 	beq.w	8001a94 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	f012 0f02 	tst.w	r2, #2
 8001906:	d0d1      	beq.n	80018ac <HAL_SPI_TransmitReceive+0x14a>
 8001908:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800190a:	b292      	uxth	r2, r2
 800190c:	2a00      	cmp	r2, #0
 800190e:	d0cd      	beq.n	80018ac <HAL_SPI_TransmitReceive+0x14a>
 8001910:	2d00      	cmp	r5, #0
 8001912:	d0cb      	beq.n	80018ac <HAL_SPI_TransmitReceive+0x14a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001914:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800191a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800191c:	3302      	adds	r3, #2
 800191e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001920:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8001928:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800192a:	b29b      	uxth	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1bc      	bne.n	80018aa <HAL_SPI_TransmitReceive+0x148>
 8001930:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001936:	d0a6      	beq.n	8001886 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8001938:	2500      	movs	r5, #0
 800193a:	e7b7      	b.n	80018ac <HAL_SPI_TransmitReceive+0x14a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	b10b      	cbz	r3, 8001944 <HAL_SPI_TransmitReceive+0x1e2>
 8001940:	2d01      	cmp	r5, #1
 8001942:	d10e      	bne.n	8001962 <HAL_SPI_TransmitReceive+0x200>
      if (hspi->TxXferCount > 1U)
 8001944:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001946:	b29b      	uxth	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d90c      	bls.n	8001966 <HAL_SPI_TransmitReceive+0x204>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800194c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	8812      	ldrh	r2, [r2, #0]
 8001952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001956:	3302      	adds	r3, #2
 8001958:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800195a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800195c:	3b02      	subs	r3, #2
 800195e:	b29b      	uxth	r3, r3
 8001960:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001962:	2501      	movs	r5, #1
 8001964:	e063      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x2cc>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001968:	6823      	ldr	r3, [r4, #0]
 800196a:	7812      	ldrb	r2, [r2, #0]
 800196c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800196e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001970:	3301      	adds	r3, #1
 8001972:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001974:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001976:	3b01      	subs	r3, #1
 8001978:	b29b      	uxth	r3, r3
 800197a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800197c:	e7f1      	b.n	8001962 <HAL_SPI_TransmitReceive+0x200>
        if (hspi->TxXferCount > 1U)
 800197e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001980:	b292      	uxth	r2, r2
 8001982:	2a01      	cmp	r2, #1
 8001984:	d912      	bls.n	80019ac <HAL_SPI_TransmitReceive+0x24a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001986:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001988:	8812      	ldrh	r2, [r2, #0]
 800198a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800198c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800198e:	3302      	adds	r3, #2
 8001990:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001992:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001994:	3b02      	subs	r3, #2
 8001996:	b29b      	uxth	r3, r3
 8001998:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800199a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800199c:	b29b      	uxth	r3, r3
 800199e:	bb13      	cbnz	r3, 80019e6 <HAL_SPI_TransmitReceive+0x284>
 80019a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a6:	d00c      	beq.n	80019c2 <HAL_SPI_TransmitReceive+0x260>
        txallowed = 0U;
 80019a8:	2500      	movs	r5, #0
 80019aa:	e051      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x2ee>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80019ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80019b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019b4:	3301      	adds	r3, #1
 80019b6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80019b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80019c0:	e7eb      	b.n	800199a <HAL_SPI_TransmitReceive+0x238>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80019c2:	f01a 0f04 	tst.w	sl, #4
 80019c6:	d107      	bne.n	80019d8 <HAL_SPI_TransmitReceive+0x276>
 80019c8:	f01b 0f08 	tst.w	fp, #8
 80019cc:	d004      	beq.n	80019d8 <HAL_SPI_TransmitReceive+0x276>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	6813      	ldr	r3, [r2, #0]
 80019d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d6:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	6813      	ldr	r3, [r2, #0]
 80019dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e0:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80019e2:	2500      	movs	r5, #0
 80019e4:	e034      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x2ee>
 80019e6:	2500      	movs	r5, #0
 80019e8:	e032      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x2ee>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	6853      	ldr	r3, [r2, #4]
 80019ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80019f4:	2501      	movs	r5, #1
 80019f6:	e00c      	b.n	8001a12 <HAL_SPI_TransmitReceive+0x2b0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80019f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80019fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a00:	3301      	adds	r3, #1
 8001a02:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001a04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8001a10:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a12:	f7ff f8cf 	bl	8000bb4 <HAL_GetTick>
 8001a16:	eba0 0009 	sub.w	r0, r0, r9
 8001a1a:	4540      	cmp	r0, r8
 8001a1c:	d303      	bcc.n	8001a26 <HAL_SPI_TransmitReceive+0x2c4>
 8001a1e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a22:	f040 808b 	bne.w	8001b3c <HAL_SPI_TransmitReceive+0x3da>
 8001a26:	f1b8 0f00 	cmp.w	r8, #0
 8001a2a:	f000 8089 	beq.w	8001b40 <HAL_SPI_TransmitReceive+0x3de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b91b      	cbnz	r3, 8001a3c <HAL_SPI_TransmitReceive+0x2da>
 8001a34:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b35b      	cbz	r3, 8001a94 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	f012 0f02 	tst.w	r2, #2
 8001a44:	d004      	beq.n	8001a50 <HAL_SPI_TransmitReceive+0x2ee>
 8001a46:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	b10a      	cbz	r2, 8001a50 <HAL_SPI_TransmitReceive+0x2ee>
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	d196      	bne.n	800197e <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	f012 0f01 	tst.w	r2, #1
 8001a58:	d0db      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x2b0>
 8001a5a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	2a00      	cmp	r2, #0
 8001a62:	d0d6      	beq.n	8001a12 <HAL_SPI_TransmitReceive+0x2b0>
        if (hspi->RxXferCount > 1U)
 8001a64:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	2a01      	cmp	r2, #1
 8001a6c:	d9c4      	bls.n	80019f8 <HAL_SPI_TransmitReceive+0x296>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a72:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a76:	3302      	adds	r3, #2
 8001a78:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001a7a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a7e:	3b02      	subs	r3, #2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001a86:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d9ac      	bls.n	80019ea <HAL_SPI_TransmitReceive+0x288>
        txallowed = 1U;
 8001a90:	2501      	movs	r5, #1
 8001a92:	e7be      	b.n	8001a12 <HAL_SPI_TransmitReceive+0x2b0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9a:	d018      	beq.n	8001ace <HAL_SPI_TransmitReceive+0x36c>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	f012 0f10 	tst.w	r2, #16
 8001aa4:	d040      	beq.n	8001b28 <HAL_SPI_TransmitReceive+0x3c6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001aa6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001aa8:	f042 0202 	orr.w	r2, r2, #2
 8001aac:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001aae:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001ab2:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8001ab4:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ab6:	464a      	mov	r2, r9
 8001ab8:	4641      	mov	r1, r8
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fdb2 	bl	8001624 <SPI_EndRxTxTransaction>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	f43f ae71 	beq.w	80017a8 <HAL_SPI_TransmitReceive+0x46>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8001aca:	2501      	movs	r5, #1
 8001acc:	e66c      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8001ace:	f8cd 9000 	str.w	r9, [sp]
 8001ad2:	4643      	mov	r3, r8
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff fd0f 	bl	80014fc <SPI_WaitFlagStateUntilTimeout>
 8001ade:	b128      	cbz	r0, 8001aec <HAL_SPI_TransmitReceive+0x38a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001ae0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8001ae8:	2503      	movs	r5, #3
      goto error;
 8001aea:	e65d      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001aec:	68e3      	ldr	r3, [r4, #12]
 8001aee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001af2:	d013      	beq.n	8001b1c <HAL_SPI_TransmitReceive+0x3ba>
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8001af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d1ce      	bne.n	8001a9c <HAL_SPI_TransmitReceive+0x33a>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8001afe:	f8cd 9000 	str.w	r9, [sp]
 8001b02:	4643      	mov	r3, r8
 8001b04:	2201      	movs	r2, #1
 8001b06:	4611      	mov	r1, r2
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f7ff fcf7 	bl	80014fc <SPI_WaitFlagStateUntilTimeout>
 8001b0e:	b140      	cbz	r0, 8001b22 <HAL_SPI_TransmitReceive+0x3c0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001b10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8001b18:	2503      	movs	r5, #3
          goto error;
 8001b1a:	e645      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
      READ_REG(hspi->Instance->DR);
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	e7bc      	b.n	8001a9c <HAL_SPI_TransmitReceive+0x33a>
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	7b1b      	ldrb	r3, [r3, #12]
 8001b26:	e7b9      	b.n	8001a9c <HAL_SPI_TransmitReceive+0x33a>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b28:	2500      	movs	r5, #0
 8001b2a:	e7c4      	b.n	8001ab6 <HAL_SPI_TransmitReceive+0x354>
    errorcode = HAL_BUSY;
 8001b2c:	2502      	movs	r5, #2
 8001b2e:	e63b      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_ERROR;
 8001b30:	2501      	movs	r5, #1
 8001b32:	e639      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
 8001b34:	2501      	movs	r5, #1
 8001b36:	e637      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
        errorcode = HAL_TIMEOUT;
 8001b38:	2503      	movs	r5, #3
 8001b3a:	e635      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
        errorcode = HAL_TIMEOUT;
 8001b3c:	2503      	movs	r5, #3
 8001b3e:	e633      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
 8001b40:	2503      	movs	r5, #3
 8001b42:	e631      	b.n	80017a8 <HAL_SPI_TransmitReceive+0x46>
  __HAL_LOCK(hspi);
 8001b44:	2502      	movs	r5, #2
 8001b46:	e635      	b.n	80017b4 <HAL_SPI_TransmitReceive+0x52>

08001b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b4c:	6883      	ldr	r3, [r0, #8]
 8001b4e:	6902      	ldr	r2, [r0, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	6942      	ldr	r2, [r0, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	69c2      	ldr	r2, [r0, #28]
 8001b58:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b5a:	6801      	ldr	r1, [r0, #0]
 8001b5c:	6808      	ldr	r0, [r1, #0]
 8001b5e:	4a99      	ldr	r2, [pc, #612]	; (8001dc4 <UART_SetConfig+0x27c>)
 8001b60:	4002      	ands	r2, r0
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	6853      	ldr	r3, [r2, #4]
 8001b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6e:	68e1      	ldr	r1, [r4, #12]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b74:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001b76:	6a23      	ldr	r3, [r4, #32]
 8001b78:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b7a:	6821      	ldr	r1, [r4, #0]
 8001b7c:	688b      	ldr	r3, [r1, #8]
 8001b7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b86:	6823      	ldr	r3, [r4, #0]
 8001b88:	4a8f      	ldr	r2, [pc, #572]	; (8001dc8 <UART_SetConfig+0x280>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <UART_SetConfig+0x78>
 8001b8e:	4a8f      	ldr	r2, [pc, #572]	; (8001dcc <UART_SetConfig+0x284>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d028      	beq.n	8001be6 <UART_SetConfig+0x9e>
 8001b94:	4a8e      	ldr	r2, [pc, #568]	; (8001dd0 <UART_SetConfig+0x288>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d03d      	beq.n	8001c16 <UART_SetConfig+0xce>
 8001b9a:	4a8e      	ldr	r2, [pc, #568]	; (8001dd4 <UART_SetConfig+0x28c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d050      	beq.n	8001c42 <UART_SetConfig+0xfa>
 8001ba0:	4a8d      	ldr	r2, [pc, #564]	; (8001dd8 <UART_SetConfig+0x290>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d062      	beq.n	8001c6c <UART_SetConfig+0x124>
 8001ba6:	4a8d      	ldr	r2, [pc, #564]	; (8001ddc <UART_SetConfig+0x294>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d077      	beq.n	8001c9c <UART_SetConfig+0x154>
 8001bac:	4a8c      	ldr	r2, [pc, #560]	; (8001de0 <UART_SetConfig+0x298>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f000 808c 	beq.w	8001ccc <UART_SetConfig+0x184>
 8001bb4:	4a8b      	ldr	r2, [pc, #556]	; (8001de4 <UART_SetConfig+0x29c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f000 80a0 	beq.w	8001cfc <UART_SetConfig+0x1b4>
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	e0b6      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001bc0:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d809      	bhi.n	8001be2 <UART_SetConfig+0x9a>
 8001bce:	e8df f003 	tbb	[pc, r3]
 8001bd2:	0402      	.short	0x0402
 8001bd4:	06ad      	.short	0x06ad
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0a9      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e0a7      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001bde:	2308      	movs	r3, #8
 8001be0:	e0a5      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001be2:	2310      	movs	r3, #16
 8001be4:	e0a3      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001be6:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b0c      	cmp	r3, #12
 8001bf2:	d80e      	bhi.n	8001c12 <UART_SetConfig+0xca>
 8001bf4:	e8df f003 	tbb	[pc, r3]
 8001bf8:	0d0d0d07 	.word	0x0d0d0d07
 8001bfc:	0d0d0d09 	.word	0x0d0d0d09
 8001c00:	0d0d0da9 	.word	0x0d0d0da9
 8001c04:	0b          	.byte	0x0b
 8001c05:	00          	.byte	0x00
 8001c06:	2300      	movs	r3, #0
 8001c08:	e091      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	e08f      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e08d      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c12:	2310      	movs	r3, #16
 8001c14:	e08b      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c16:	4b74      	ldr	r3, [pc, #464]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d00a      	beq.n	8001c3a <UART_SetConfig+0xf2>
 8001c24:	d906      	bls.n	8001c34 <UART_SetConfig+0xec>
 8001c26:	2b20      	cmp	r3, #32
 8001c28:	f000 8091 	beq.w	8001d4e <UART_SetConfig+0x206>
 8001c2c:	2b30      	cmp	r3, #48	; 0x30
 8001c2e:	d106      	bne.n	8001c3e <UART_SetConfig+0xf6>
 8001c30:	2308      	movs	r3, #8
 8001c32:	e07c      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c34:	b91b      	cbnz	r3, 8001c3e <UART_SetConfig+0xf6>
 8001c36:	2300      	movs	r3, #0
 8001c38:	e079      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e077      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c3e:	2310      	movs	r3, #16
 8001c40:	e075      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c42:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d009      	beq.n	8001c64 <UART_SetConfig+0x11c>
 8001c50:	d905      	bls.n	8001c5e <UART_SetConfig+0x116>
 8001c52:	2b80      	cmp	r3, #128	; 0x80
 8001c54:	d07d      	beq.n	8001d52 <UART_SetConfig+0x20a>
 8001c56:	2bc0      	cmp	r3, #192	; 0xc0
 8001c58:	d106      	bne.n	8001c68 <UART_SetConfig+0x120>
 8001c5a:	2308      	movs	r3, #8
 8001c5c:	e067      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c5e:	b91b      	cbnz	r3, 8001c68 <UART_SetConfig+0x120>
 8001c60:	2300      	movs	r3, #0
 8001c62:	e064      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e062      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c68:	2310      	movs	r3, #16
 8001c6a:	e060      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7a:	d00b      	beq.n	8001c94 <UART_SetConfig+0x14c>
 8001c7c:	d907      	bls.n	8001c8e <UART_SetConfig+0x146>
 8001c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c82:	d068      	beq.n	8001d56 <UART_SetConfig+0x20e>
 8001c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c88:	d106      	bne.n	8001c98 <UART_SetConfig+0x150>
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	e04f      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c8e:	b91b      	cbnz	r3, 8001c98 <UART_SetConfig+0x150>
 8001c90:	2300      	movs	r3, #0
 8001c92:	e04c      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e04a      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c98:	2310      	movs	r3, #16
 8001c9a:	e048      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001c9c:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d00b      	beq.n	8001cc4 <UART_SetConfig+0x17c>
 8001cac:	d907      	bls.n	8001cbe <UART_SetConfig+0x176>
 8001cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb2:	d052      	beq.n	8001d5a <UART_SetConfig+0x212>
 8001cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001cb8:	d106      	bne.n	8001cc8 <UART_SetConfig+0x180>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e037      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cbe:	b91b      	cbnz	r3, 8001cc8 <UART_SetConfig+0x180>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e034      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	e032      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cc8:	2310      	movs	r3, #16
 8001cca:	e030      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001ccc:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cda:	d00b      	beq.n	8001cf4 <UART_SetConfig+0x1ac>
 8001cdc:	d907      	bls.n	8001cee <UART_SetConfig+0x1a6>
 8001cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce2:	d03c      	beq.n	8001d5e <UART_SetConfig+0x216>
 8001ce4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ce8:	d106      	bne.n	8001cf8 <UART_SetConfig+0x1b0>
 8001cea:	2308      	movs	r3, #8
 8001cec:	e01f      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cee:	b91b      	cbnz	r3, 8001cf8 <UART_SetConfig+0x1b0>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e01c      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e01a      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	e018      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <UART_SetConfig+0x2a0>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d0a:	d00b      	beq.n	8001d24 <UART_SetConfig+0x1dc>
 8001d0c:	d907      	bls.n	8001d1e <UART_SetConfig+0x1d6>
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	d026      	beq.n	8001d62 <UART_SetConfig+0x21a>
 8001d14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d18:	d106      	bne.n	8001d28 <UART_SetConfig+0x1e0>
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	e007      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d1e:	b91b      	cbnz	r3, 8001d28 <UART_SetConfig+0x1e0>
 8001d20:	2300      	movs	r3, #0
 8001d22:	e004      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d24:	2304      	movs	r3, #4
 8001d26:	e002      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d28:	2310      	movs	r3, #16
 8001d2a:	e000      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d2c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2e:	69e2      	ldr	r2, [r4, #28]
 8001d30:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d34:	d017      	beq.n	8001d66 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	f200 80b3 	bhi.w	8001ea2 <UART_SetConfig+0x35a>
 8001d3c:	e8df f003 	tbb	[pc, r3]
 8001d40:	b1958b76 	.word	0xb1958b76
 8001d44:	b1b1b19e 	.word	0xb1b1b19e
 8001d48:	a8          	.byte	0xa8
 8001d49:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e7ef      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e7ed      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e7eb      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e7e9      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e7e7      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e7e5      	b.n	8001d2e <UART_SetConfig+0x1e6>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e7e3      	b.n	8001d2e <UART_SetConfig+0x1e6>
    switch (clocksource)
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d85d      	bhi.n	8001e26 <UART_SetConfig+0x2de>
 8001d6a:	e8df f003 	tbb	[pc, r3]
 8001d6e:	1f05      	.short	0x1f05
 8001d70:	5c485c3f 	.word	0x5c485c3f
 8001d74:	5c5c      	.short	0x5c5c
 8001d76:	53          	.byte	0x53
 8001d77:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d78:	f7ff fba0 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8001d7c:	6862      	ldr	r2, [r4, #4]
 8001d7e:	0853      	lsrs	r3, r2, #1
 8001d80:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d88:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d8a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d8c:	f1a3 0110 	sub.w	r1, r3, #16
 8001d90:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001d94:	4291      	cmp	r1, r2
 8001d96:	f200 8087 	bhi.w	8001ea8 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001da0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001da4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001da6:	6822      	ldr	r2, [r4, #0]
 8001da8:	60d3      	str	r3, [r2, #12]
 8001daa:	e050      	b.n	8001e4e <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001dac:	f7ff fb96 	bl	80014dc <HAL_RCC_GetPCLK2Freq>
 8001db0:	6862      	ldr	r2, [r4, #4]
 8001db2:	0853      	lsrs	r3, r2, #1
 8001db4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001db8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dbc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dbe:	2000      	movs	r0, #0
        break;
 8001dc0:	e7e4      	b.n	8001d8c <UART_SetConfig+0x244>
 8001dc2:	bf00      	nop
 8001dc4:	efff69f3 	.word	0xefff69f3
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40004800 	.word	0x40004800
 8001dd4:	40004c00 	.word	0x40004c00
 8001dd8:	40005000 	.word	0x40005000
 8001ddc:	40011400 	.word	0x40011400
 8001de0:	40007800 	.word	0x40007800
 8001de4:	40007c00 	.word	0x40007c00
 8001de8:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <UART_SetConfig+0x368>)
 8001df0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001df8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dfa:	2000      	movs	r0, #0
        break;
 8001dfc:	e7c6      	b.n	8001d8c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dfe:	f7ff fa51 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001e02:	6862      	ldr	r2, [r4, #4]
 8001e04:	0853      	lsrs	r3, r2, #1
 8001e06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e0e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e10:	2000      	movs	r0, #0
        break;
 8001e12:	e7bb      	b.n	8001d8c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001e14:	6862      	ldr	r2, [r4, #4]
 8001e16:	0853      	lsrs	r3, r2, #1
 8001e18:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e20:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e22:	2000      	movs	r0, #0
        break;
 8001e24:	e7b2      	b.n	8001d8c <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8001e26:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e7af      	b.n	8001d8c <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e2c:	f7ff fb46 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8001e30:	6862      	ldr	r2, [r4, #4]
 8001e32:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e3a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e3c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e3e:	f1a3 0110 	sub.w	r1, r3, #16
 8001e42:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001e46:	4291      	cmp	r1, r2
 8001e48:	d830      	bhi.n	8001eac <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e52:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001e54:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e56:	f7ff fb41 	bl	80014dc <HAL_RCC_GetPCLK2Freq>
 8001e5a:	6862      	ldr	r2, [r4, #4]
 8001e5c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e64:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e66:	2000      	movs	r0, #0
        break;
 8001e68:	e7e9      	b.n	8001e3e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e6a:	6862      	ldr	r2, [r4, #4]
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <UART_SetConfig+0x36c>)
 8001e6e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e76:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e78:	2000      	movs	r0, #0
        break;
 8001e7a:	e7e0      	b.n	8001e3e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e7c:	f7ff fa12 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001e80:	6862      	ldr	r2, [r4, #4]
 8001e82:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e8a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e8c:	2000      	movs	r0, #0
        break;
 8001e8e:	e7d6      	b.n	8001e3e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e90:	6862      	ldr	r2, [r4, #4]
 8001e92:	0853      	lsrs	r3, r2, #1
 8001e94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e9c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e9e:	2000      	movs	r0, #0
        break;
 8001ea0:	e7cd      	b.n	8001e3e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e7ca      	b.n	8001e3e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	e7d0      	b.n	8001e4e <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8001eac:	2001      	movs	r0, #1
 8001eae:	e7ce      	b.n	8001e4e <UART_SetConfig+0x306>
 8001eb0:	01e84800 	.word	0x01e84800
 8001eb4:	00f42400 	.word	0x00f42400

08001eb8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eba:	f013 0f01 	tst.w	r3, #1
 8001ebe:	d006      	beq.n	8001ece <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ec0:	6802      	ldr	r2, [r0, #0]
 8001ec2:	6853      	ldr	r3, [r2, #4]
 8001ec4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ec8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ece:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ed0:	f013 0f02 	tst.w	r3, #2
 8001ed4:	d006      	beq.n	8001ee4 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ed6:	6802      	ldr	r2, [r0, #0]
 8001ed8:	6853      	ldr	r3, [r2, #4]
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ede:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ee6:	f013 0f04 	tst.w	r3, #4
 8001eea:	d006      	beq.n	8001efa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eec:	6802      	ldr	r2, [r0, #0]
 8001eee:	6853      	ldr	r3, [r2, #4]
 8001ef0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001efa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001efc:	f013 0f08 	tst.w	r3, #8
 8001f00:	d006      	beq.n	8001f10 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f02:	6802      	ldr	r2, [r0, #0]
 8001f04:	6853      	ldr	r3, [r2, #4]
 8001f06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f0a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f12:	f013 0f10 	tst.w	r3, #16
 8001f16:	d006      	beq.n	8001f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	6893      	ldr	r3, [r2, #8]
 8001f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f20:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001f22:	430b      	orrs	r3, r1
 8001f24:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f28:	f013 0f20 	tst.w	r3, #32
 8001f2c:	d006      	beq.n	8001f3c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f2e:	6802      	ldr	r2, [r0, #0]
 8001f30:	6893      	ldr	r3, [r2, #8]
 8001f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f36:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f38:	430b      	orrs	r3, r1
 8001f3a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f42:	d00a      	beq.n	8001f5a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	6853      	ldr	r3, [r2, #4]
 8001f48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f52:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f58:	d00b      	beq.n	8001f72 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001f60:	d006      	beq.n	8001f70 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f62:	6802      	ldr	r2, [r0, #0]
 8001f64:	6853      	ldr	r3, [r2, #4]
 8001f66:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f6a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6053      	str	r3, [r2, #4]
  }
}
 8001f70:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f72:	6802      	ldr	r2, [r0, #0]
 8001f74:	6853      	ldr	r3, [r2, #4]
 8001f76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f7a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6053      	str	r3, [r2, #4]
 8001f80:	e7eb      	b.n	8001f5a <UART_AdvFeatureConfig+0xa2>

08001f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f86:	4605      	mov	r5, r0
 8001f88:	460f      	mov	r7, r1
 8001f8a:	4616      	mov	r6, r2
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f90:	682b      	ldr	r3, [r5, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	ea37 0303 	bics.w	r3, r7, r3
 8001f98:	bf0c      	ite	eq
 8001f9a:	2301      	moveq	r3, #1
 8001f9c:	2300      	movne	r3, #0
 8001f9e:	42b3      	cmp	r3, r6
 8001fa0:	d11c      	bne.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001fa6:	d0f3      	beq.n	8001f90 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fe04 	bl	8000bb4 <HAL_GetTick>
 8001fac:	eba0 0008 	sub.w	r0, r0, r8
 8001fb0:	42a0      	cmp	r0, r4
 8001fb2:	d801      	bhi.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x36>
 8001fb4:	2c00      	cmp	r4, #0
 8001fb6:	d1eb      	bne.n	8001f90 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fb8:	682a      	ldr	r2, [r5, #0]
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001fc0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc2:	682a      	ldr	r2, [r5, #0]
 8001fc4:	6893      	ldr	r3, [r2, #8]
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8001fd8:	2003      	movs	r0, #3
 8001fda:	e000      	b.n	8001fde <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 8001fdc:	2000      	movs	r0, #0
}
 8001fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001fe2 <HAL_UART_Transmit>:
{
 8001fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001fea:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	d159      	bne.n	80020a4 <HAL_UART_Transmit+0xc2>
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	460d      	mov	r5, r1
 8001ff4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001ff6:	fab2 f382 	clz	r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	bf08      	it	eq
 8002000:	2301      	moveq	r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d153      	bne.n	80020ae <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002006:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800200a:	2b01      	cmp	r3, #1
 800200c:	d051      	beq.n	80020b2 <HAL_UART_Transmit+0xd0>
 800200e:	2301      	movs	r3, #1
 8002010:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002014:	2300      	movs	r3, #0
 8002016:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002018:	2321      	movs	r3, #33	; 0x21
 800201a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800201c:	f7fe fdca 	bl	8000bb4 <HAL_GetTick>
 8002020:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002022:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002026:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202a:	68a3      	ldr	r3, [r4, #8]
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002030:	d002      	beq.n	8002038 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002032:	f04f 0800 	mov.w	r8, #0
 8002036:	e010      	b.n	800205a <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002038:	6923      	ldr	r3, [r4, #16]
 800203a:	b30b      	cbz	r3, 8002080 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 800203c:	f04f 0800 	mov.w	r8, #0
 8002040:	e00b      	b.n	800205a <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002042:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800204c:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800204e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002052:	3b01      	subs	r3, #1
 8002054:	b29b      	uxth	r3, r3
 8002056:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800205a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800205e:	b29b      	uxth	r3, r3
 8002060:	b18b      	cbz	r3, 8002086 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002062:	9600      	str	r6, [sp, #0]
 8002064:	463b      	mov	r3, r7
 8002066:	2200      	movs	r2, #0
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff ff89 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 8002070:	bb08      	cbnz	r0, 80020b6 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 8002072:	2d00      	cmp	r5, #0
 8002074:	d0e5      	beq.n	8002042 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002076:	f815 2b01 	ldrb.w	r2, [r5], #1
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
 800207e:	e7e6      	b.n	800204e <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 8002080:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002082:	2500      	movs	r5, #0
 8002084:	e7e9      	b.n	800205a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	9600      	str	r6, [sp, #0]
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	2140      	movs	r1, #64	; 0x40
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ff77 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	b980      	cbnz	r0, 80020ba <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 8002098:	2220      	movs	r2, #32
 800209a:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800209c:	2200      	movs	r2, #0
 800209e:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 80020a2:	e000      	b.n	80020a6 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	b002      	add	sp, #8
 80020aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e7f9      	b.n	80020a6 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80020b2:	2302      	movs	r3, #2
 80020b4:	e7f7      	b.n	80020a6 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e7f5      	b.n	80020a6 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e7f3      	b.n	80020a6 <HAL_UART_Transmit+0xc4>

080020be <HAL_UART_Receive>:
{
 80020be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020c2:	b083      	sub	sp, #12
 80020c4:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d17e      	bne.n	80021ca <HAL_UART_Receive+0x10c>
 80020cc:	4604      	mov	r4, r0
 80020ce:	460d      	mov	r5, r1
 80020d0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80020d2:	fab2 f382 	clz	r3, r2
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2900      	cmp	r1, #0
 80020da:	bf08      	it	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d177      	bne.n	80021d2 <HAL_UART_Receive+0x114>
    __HAL_LOCK(huart);
 80020e2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d075      	beq.n	80021d6 <HAL_UART_Receive+0x118>
 80020ea:	2301      	movs	r3, #1
 80020ec:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020f4:	2322      	movs	r3, #34	; 0x22
 80020f6:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80020f8:	f7fe fd5c 	bl	8000bb4 <HAL_GetTick>
 80020fc:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 80020fe:	f8a4 8058 	strh.w	r8, [r4, #88]	; 0x58
    huart->RxXferCount = Size;
 8002102:	f8a4 805a 	strh.w	r8, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002106:	68a3      	ldr	r3, [r4, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d006      	beq.n	800211c <HAL_UART_Receive+0x5e>
 800210e:	b9a3      	cbnz	r3, 800213a <HAL_UART_Receive+0x7c>
 8002110:	6922      	ldr	r2, [r4, #16]
 8002112:	b972      	cbnz	r2, 8002132 <HAL_UART_Receive+0x74>
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 800211a:	e014      	b.n	8002146 <HAL_UART_Receive+0x88>
 800211c:	6922      	ldr	r2, [r4, #16]
 800211e:	b922      	cbnz	r2, 800212a <HAL_UART_Receive+0x6c>
 8002120:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002124:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002128:	e00d      	b.n	8002146 <HAL_UART_Receive+0x88>
 800212a:	22ff      	movs	r2, #255	; 0xff
 800212c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002130:	e009      	b.n	8002146 <HAL_UART_Receive+0x88>
 8002132:	227f      	movs	r2, #127	; 0x7f
 8002134:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002138:	e005      	b.n	8002146 <HAL_UART_Receive+0x88>
 800213a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800213e:	d00a      	beq.n	8002156 <HAL_UART_Receive+0x98>
 8002140:	2200      	movs	r2, #0
 8002142:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002146:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d00c      	beq.n	800216a <HAL_UART_Receive+0xac>
      pdata16bits = NULL;
 8002150:	f04f 0900 	mov.w	r9, #0
 8002154:	e01d      	b.n	8002192 <HAL_UART_Receive+0xd4>
    UART_MASK_COMPUTATION(huart);
 8002156:	6922      	ldr	r2, [r4, #16]
 8002158:	b91a      	cbnz	r2, 8002162 <HAL_UART_Receive+0xa4>
 800215a:	227f      	movs	r2, #127	; 0x7f
 800215c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002160:	e7f1      	b.n	8002146 <HAL_UART_Receive+0x88>
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8002168:	e7ed      	b.n	8002146 <HAL_UART_Receive+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	b113      	cbz	r3, 8002174 <HAL_UART_Receive+0xb6>
      pdata16bits = NULL;
 800216e:	f04f 0900 	mov.w	r9, #0
 8002172:	e00e      	b.n	8002192 <HAL_UART_Receive+0xd4>
      pdata16bits = (uint16_t *) pData;
 8002174:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8002176:	2500      	movs	r5, #0
 8002178:	e00b      	b.n	8002192 <HAL_UART_Receive+0xd4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	ea08 0303 	and.w	r3, r8, r3
 8002182:	f829 3b02 	strh.w	r3, [r9], #2
      huart->RxXferCount--;
 8002186:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800218a:	3b01      	subs	r3, #1
 800218c:	b29b      	uxth	r3, r3
 800218e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002192:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002196:	b29b      	uxth	r3, r3
 8002198:	b18b      	cbz	r3, 80021be <HAL_UART_Receive+0x100>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800219a:	9600      	str	r6, [sp, #0]
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	2120      	movs	r1, #32
 80021a2:	4620      	mov	r0, r4
 80021a4:	f7ff feed 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 80021a8:	b9b8      	cbnz	r0, 80021da <HAL_UART_Receive+0x11c>
      if (pdata8bits == NULL)
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	d0e5      	beq.n	800217a <HAL_UART_Receive+0xbc>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b2:	fa5f f388 	uxtb.w	r3, r8
 80021b6:	4013      	ands	r3, r2
 80021b8:	f805 3b01 	strb.w	r3, [r5], #1
 80021bc:	e7e3      	b.n	8002186 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 80021be:	2320      	movs	r3, #32
 80021c0:	67a3      	str	r3, [r4, #120]	; 0x78
    __HAL_UNLOCK(huart);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 80021c8:	e000      	b.n	80021cc <HAL_UART_Receive+0x10e>
    return HAL_BUSY;
 80021ca:	2002      	movs	r0, #2
}
 80021cc:	b003      	add	sp, #12
 80021ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
 80021d4:	e7fa      	b.n	80021cc <HAL_UART_Receive+0x10e>
    __HAL_LOCK(huart);
 80021d6:	2002      	movs	r0, #2
 80021d8:	e7f8      	b.n	80021cc <HAL_UART_Receive+0x10e>
        return HAL_TIMEOUT;
 80021da:	2003      	movs	r0, #3
 80021dc:	e7f6      	b.n	80021cc <HAL_UART_Receive+0x10e>

080021de <UART_CheckIdleState>:
{
 80021de:	b510      	push	{r4, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80021e8:	f7fe fce4 	bl	8000bb4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021ec:	6822      	ldr	r2, [r4, #0]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f012 0f08 	tst.w	r2, #8
 80021f4:	d107      	bne.n	8002206 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 80021f6:	2320      	movs	r3, #32
 80021f8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80021fa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8002202:	b002      	add	sp, #8
 8002204:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	4603      	mov	r3, r0
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff feb4 	bl	8001f82 <UART_WaitOnFlagUntilTimeout>
 800221a:	2800      	cmp	r0, #0
 800221c:	d0eb      	beq.n	80021f6 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800221e:	2003      	movs	r0, #3
 8002220:	e7ef      	b.n	8002202 <UART_CheckIdleState+0x24>

08002222 <HAL_UART_Init>:
  if (huart == NULL)
 8002222:	b368      	cbz	r0, 8002280 <HAL_UART_Init+0x5e>
{
 8002224:	b510      	push	{r4, lr}
 8002226:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002228:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800222a:	b303      	cbz	r3, 800226e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800222c:	2324      	movs	r3, #36	; 0x24
 800222e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff fc84 	bl	8001b48 <UART_SetConfig>
 8002240:	2801      	cmp	r0, #1
 8002242:	d013      	beq.n	800226c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002246:	b9bb      	cbnz	r3, 8002278 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	6853      	ldr	r3, [r2, #4]
 800224c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002250:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6893      	ldr	r3, [r2, #8]
 8002256:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800225a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	6813      	ldr	r3, [r2, #0]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ffb9 	bl	80021de <UART_CheckIdleState>
}
 800226c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800226e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002272:	f7fe fb73 	bl	800095c <HAL_UART_MspInit>
 8002276:	e7d9      	b.n	800222c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002278:	4620      	mov	r0, r4
 800227a:	f7ff fe1d 	bl	8001eb8 <UART_AdvFeatureConfig>
 800227e:	e7e3      	b.n	8002248 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
}
 8002282:	4770      	bx	lr

08002284 <__sflush_r>:
 8002284:	898a      	ldrh	r2, [r1, #12]
 8002286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228a:	4605      	mov	r5, r0
 800228c:	0710      	lsls	r0, r2, #28
 800228e:	460c      	mov	r4, r1
 8002290:	d458      	bmi.n	8002344 <__sflush_r+0xc0>
 8002292:	684b      	ldr	r3, [r1, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	dc05      	bgt.n	80022a4 <__sflush_r+0x20>
 8002298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	dc02      	bgt.n	80022a4 <__sflush_r+0x20>
 800229e:	2000      	movs	r0, #0
 80022a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022a6:	2e00      	cmp	r6, #0
 80022a8:	d0f9      	beq.n	800229e <__sflush_r+0x1a>
 80022aa:	2300      	movs	r3, #0
 80022ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80022b0:	682f      	ldr	r7, [r5, #0]
 80022b2:	6a21      	ldr	r1, [r4, #32]
 80022b4:	602b      	str	r3, [r5, #0]
 80022b6:	d032      	beq.n	800231e <__sflush_r+0x9a>
 80022b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022ba:	89a3      	ldrh	r3, [r4, #12]
 80022bc:	075a      	lsls	r2, r3, #29
 80022be:	d505      	bpl.n	80022cc <__sflush_r+0x48>
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	1ac0      	subs	r0, r0, r3
 80022c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022c6:	b10b      	cbz	r3, 80022cc <__sflush_r+0x48>
 80022c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ca:	1ac0      	subs	r0, r0, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	4602      	mov	r2, r0
 80022d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022d2:	6a21      	ldr	r1, [r4, #32]
 80022d4:	4628      	mov	r0, r5
 80022d6:	47b0      	blx	r6
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	89a3      	ldrh	r3, [r4, #12]
 80022dc:	d106      	bne.n	80022ec <__sflush_r+0x68>
 80022de:	6829      	ldr	r1, [r5, #0]
 80022e0:	291d      	cmp	r1, #29
 80022e2:	d848      	bhi.n	8002376 <__sflush_r+0xf2>
 80022e4:	4a29      	ldr	r2, [pc, #164]	; (800238c <__sflush_r+0x108>)
 80022e6:	40ca      	lsrs	r2, r1
 80022e8:	07d6      	lsls	r6, r2, #31
 80022ea:	d544      	bpl.n	8002376 <__sflush_r+0xf2>
 80022ec:	2200      	movs	r2, #0
 80022ee:	6062      	str	r2, [r4, #4]
 80022f0:	04d9      	lsls	r1, r3, #19
 80022f2:	6922      	ldr	r2, [r4, #16]
 80022f4:	6022      	str	r2, [r4, #0]
 80022f6:	d504      	bpl.n	8002302 <__sflush_r+0x7e>
 80022f8:	1c42      	adds	r2, r0, #1
 80022fa:	d101      	bne.n	8002300 <__sflush_r+0x7c>
 80022fc:	682b      	ldr	r3, [r5, #0]
 80022fe:	b903      	cbnz	r3, 8002302 <__sflush_r+0x7e>
 8002300:	6560      	str	r0, [r4, #84]	; 0x54
 8002302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002304:	602f      	str	r7, [r5, #0]
 8002306:	2900      	cmp	r1, #0
 8002308:	d0c9      	beq.n	800229e <__sflush_r+0x1a>
 800230a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800230e:	4299      	cmp	r1, r3
 8002310:	d002      	beq.n	8002318 <__sflush_r+0x94>
 8002312:	4628      	mov	r0, r5
 8002314:	f000 f99c 	bl	8002650 <_free_r>
 8002318:	2000      	movs	r0, #0
 800231a:	6360      	str	r0, [r4, #52]	; 0x34
 800231c:	e7c0      	b.n	80022a0 <__sflush_r+0x1c>
 800231e:	2301      	movs	r3, #1
 8002320:	4628      	mov	r0, r5
 8002322:	47b0      	blx	r6
 8002324:	1c41      	adds	r1, r0, #1
 8002326:	d1c8      	bne.n	80022ba <__sflush_r+0x36>
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0c5      	beq.n	80022ba <__sflush_r+0x36>
 800232e:	2b1d      	cmp	r3, #29
 8002330:	d001      	beq.n	8002336 <__sflush_r+0xb2>
 8002332:	2b16      	cmp	r3, #22
 8002334:	d101      	bne.n	800233a <__sflush_r+0xb6>
 8002336:	602f      	str	r7, [r5, #0]
 8002338:	e7b1      	b.n	800229e <__sflush_r+0x1a>
 800233a:	89a3      	ldrh	r3, [r4, #12]
 800233c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002340:	81a3      	strh	r3, [r4, #12]
 8002342:	e7ad      	b.n	80022a0 <__sflush_r+0x1c>
 8002344:	690f      	ldr	r7, [r1, #16]
 8002346:	2f00      	cmp	r7, #0
 8002348:	d0a9      	beq.n	800229e <__sflush_r+0x1a>
 800234a:	0793      	lsls	r3, r2, #30
 800234c:	680e      	ldr	r6, [r1, #0]
 800234e:	bf08      	it	eq
 8002350:	694b      	ldreq	r3, [r1, #20]
 8002352:	600f      	str	r7, [r1, #0]
 8002354:	bf18      	it	ne
 8002356:	2300      	movne	r3, #0
 8002358:	eba6 0807 	sub.w	r8, r6, r7
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	f1b8 0f00 	cmp.w	r8, #0
 8002362:	dd9c      	ble.n	800229e <__sflush_r+0x1a>
 8002364:	4643      	mov	r3, r8
 8002366:	463a      	mov	r2, r7
 8002368:	6a21      	ldr	r1, [r4, #32]
 800236a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800236c:	4628      	mov	r0, r5
 800236e:	47b0      	blx	r6
 8002370:	2800      	cmp	r0, #0
 8002372:	dc06      	bgt.n	8002382 <__sflush_r+0xfe>
 8002374:	89a3      	ldrh	r3, [r4, #12]
 8002376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237a:	81a3      	strh	r3, [r4, #12]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	e78e      	b.n	80022a0 <__sflush_r+0x1c>
 8002382:	4407      	add	r7, r0
 8002384:	eba8 0800 	sub.w	r8, r8, r0
 8002388:	e7e9      	b.n	800235e <__sflush_r+0xda>
 800238a:	bf00      	nop
 800238c:	20400001 	.word	0x20400001

08002390 <_fflush_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	690b      	ldr	r3, [r1, #16]
 8002394:	4605      	mov	r5, r0
 8002396:	460c      	mov	r4, r1
 8002398:	b1db      	cbz	r3, 80023d2 <_fflush_r+0x42>
 800239a:	b118      	cbz	r0, 80023a4 <_fflush_r+0x14>
 800239c:	6983      	ldr	r3, [r0, #24]
 800239e:	b90b      	cbnz	r3, 80023a4 <_fflush_r+0x14>
 80023a0:	f000 f872 	bl	8002488 <__sinit>
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <_fflush_r+0x48>)
 80023a6:	429c      	cmp	r4, r3
 80023a8:	d109      	bne.n	80023be <_fflush_r+0x2e>
 80023aa:	686c      	ldr	r4, [r5, #4]
 80023ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b0:	b17b      	cbz	r3, 80023d2 <_fflush_r+0x42>
 80023b2:	4621      	mov	r1, r4
 80023b4:	4628      	mov	r0, r5
 80023b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ba:	f7ff bf63 	b.w	8002284 <__sflush_r>
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_fflush_r+0x4c>)
 80023c0:	429c      	cmp	r4, r3
 80023c2:	d101      	bne.n	80023c8 <_fflush_r+0x38>
 80023c4:	68ac      	ldr	r4, [r5, #8]
 80023c6:	e7f1      	b.n	80023ac <_fflush_r+0x1c>
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <_fflush_r+0x50>)
 80023ca:	429c      	cmp	r4, r3
 80023cc:	bf08      	it	eq
 80023ce:	68ec      	ldreq	r4, [r5, #12]
 80023d0:	e7ec      	b.n	80023ac <_fflush_r+0x1c>
 80023d2:	2000      	movs	r0, #0
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
 80023d6:	bf00      	nop
 80023d8:	080036c0 	.word	0x080036c0
 80023dc:	080036e0 	.word	0x080036e0
 80023e0:	080036a0 	.word	0x080036a0

080023e4 <fflush>:
 80023e4:	4601      	mov	r1, r0
 80023e6:	b920      	cbnz	r0, 80023f2 <fflush+0xe>
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <fflush+0x18>)
 80023ea:	4905      	ldr	r1, [pc, #20]	; (8002400 <fflush+0x1c>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f000 b8d3 	b.w	8002598 <_fwalk_reent>
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <fflush+0x20>)
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f7ff bfcb 	b.w	8002390 <_fflush_r>
 80023fa:	bf00      	nop
 80023fc:	08003700 	.word	0x08003700
 8002400:	08002391 	.word	0x08002391
 8002404:	20000038 	.word	0x20000038

08002408 <std>:
 8002408:	2300      	movs	r3, #0
 800240a:	b510      	push	{r4, lr}
 800240c:	4604      	mov	r4, r0
 800240e:	e9c0 3300 	strd	r3, r3, [r0]
 8002412:	6083      	str	r3, [r0, #8]
 8002414:	8181      	strh	r1, [r0, #12]
 8002416:	6643      	str	r3, [r0, #100]	; 0x64
 8002418:	81c2      	strh	r2, [r0, #14]
 800241a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800241e:	6183      	str	r3, [r0, #24]
 8002420:	4619      	mov	r1, r3
 8002422:	2208      	movs	r2, #8
 8002424:	305c      	adds	r0, #92	; 0x5c
 8002426:	f000 f90b 	bl	8002640 <memset>
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <std+0x38>)
 800242c:	6263      	str	r3, [r4, #36]	; 0x24
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <std+0x3c>)
 8002430:	62a3      	str	r3, [r4, #40]	; 0x28
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <std+0x40>)
 8002434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <std+0x44>)
 8002438:	6224      	str	r4, [r4, #32]
 800243a:	6323      	str	r3, [r4, #48]	; 0x30
 800243c:	bd10      	pop	{r4, pc}
 800243e:	bf00      	nop
 8002440:	080028e1 	.word	0x080028e1
 8002444:	08002903 	.word	0x08002903
 8002448:	0800293b 	.word	0x0800293b
 800244c:	0800295f 	.word	0x0800295f

08002450 <_cleanup_r>:
 8002450:	4901      	ldr	r1, [pc, #4]	; (8002458 <_cleanup_r+0x8>)
 8002452:	f000 b8a1 	b.w	8002598 <_fwalk_reent>
 8002456:	bf00      	nop
 8002458:	08002391 	.word	0x08002391

0800245c <__sfmoreglue>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	1e4a      	subs	r2, r1, #1
 8002460:	2568      	movs	r5, #104	; 0x68
 8002462:	4355      	muls	r5, r2
 8002464:	460e      	mov	r6, r1
 8002466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800246a:	f000 f93f 	bl	80026ec <_malloc_r>
 800246e:	4604      	mov	r4, r0
 8002470:	b140      	cbz	r0, 8002484 <__sfmoreglue+0x28>
 8002472:	2100      	movs	r1, #0
 8002474:	e9c0 1600 	strd	r1, r6, [r0]
 8002478:	300c      	adds	r0, #12
 800247a:	60a0      	str	r0, [r4, #8]
 800247c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002480:	f000 f8de 	bl	8002640 <memset>
 8002484:	4620      	mov	r0, r4
 8002486:	bd70      	pop	{r4, r5, r6, pc}

08002488 <__sinit>:
 8002488:	6983      	ldr	r3, [r0, #24]
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
 800248e:	bb33      	cbnz	r3, 80024de <__sinit+0x56>
 8002490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002494:	6503      	str	r3, [r0, #80]	; 0x50
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <__sinit+0x58>)
 8002498:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <__sinit+0x5c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6282      	str	r2, [r0, #40]	; 0x28
 800249e:	4298      	cmp	r0, r3
 80024a0:	bf04      	itt	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	6183      	streq	r3, [r0, #24]
 80024a6:	f000 f81f 	bl	80024e8 <__sfp>
 80024aa:	6060      	str	r0, [r4, #4]
 80024ac:	4620      	mov	r0, r4
 80024ae:	f000 f81b 	bl	80024e8 <__sfp>
 80024b2:	60a0      	str	r0, [r4, #8]
 80024b4:	4620      	mov	r0, r4
 80024b6:	f000 f817 	bl	80024e8 <__sfp>
 80024ba:	2200      	movs	r2, #0
 80024bc:	60e0      	str	r0, [r4, #12]
 80024be:	2104      	movs	r1, #4
 80024c0:	6860      	ldr	r0, [r4, #4]
 80024c2:	f7ff ffa1 	bl	8002408 <std>
 80024c6:	2201      	movs	r2, #1
 80024c8:	2109      	movs	r1, #9
 80024ca:	68a0      	ldr	r0, [r4, #8]
 80024cc:	f7ff ff9c 	bl	8002408 <std>
 80024d0:	2202      	movs	r2, #2
 80024d2:	2112      	movs	r1, #18
 80024d4:	68e0      	ldr	r0, [r4, #12]
 80024d6:	f7ff ff97 	bl	8002408 <std>
 80024da:	2301      	movs	r3, #1
 80024dc:	61a3      	str	r3, [r4, #24]
 80024de:	bd10      	pop	{r4, pc}
 80024e0:	08003700 	.word	0x08003700
 80024e4:	08002451 	.word	0x08002451

080024e8 <__sfp>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <__sfp+0x70>)
 80024ec:	681e      	ldr	r6, [r3, #0]
 80024ee:	69b3      	ldr	r3, [r6, #24]
 80024f0:	4607      	mov	r7, r0
 80024f2:	b913      	cbnz	r3, 80024fa <__sfp+0x12>
 80024f4:	4630      	mov	r0, r6
 80024f6:	f7ff ffc7 	bl	8002488 <__sinit>
 80024fa:	3648      	adds	r6, #72	; 0x48
 80024fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002500:	3b01      	subs	r3, #1
 8002502:	d503      	bpl.n	800250c <__sfp+0x24>
 8002504:	6833      	ldr	r3, [r6, #0]
 8002506:	b133      	cbz	r3, 8002516 <__sfp+0x2e>
 8002508:	6836      	ldr	r6, [r6, #0]
 800250a:	e7f7      	b.n	80024fc <__sfp+0x14>
 800250c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002510:	b16d      	cbz	r5, 800252e <__sfp+0x46>
 8002512:	3468      	adds	r4, #104	; 0x68
 8002514:	e7f4      	b.n	8002500 <__sfp+0x18>
 8002516:	2104      	movs	r1, #4
 8002518:	4638      	mov	r0, r7
 800251a:	f7ff ff9f 	bl	800245c <__sfmoreglue>
 800251e:	6030      	str	r0, [r6, #0]
 8002520:	2800      	cmp	r0, #0
 8002522:	d1f1      	bne.n	8002508 <__sfp+0x20>
 8002524:	230c      	movs	r3, #12
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4604      	mov	r4, r0
 800252a:	4620      	mov	r0, r4
 800252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <__sfp+0x74>)
 8002530:	6665      	str	r5, [r4, #100]	; 0x64
 8002532:	e9c4 5500 	strd	r5, r5, [r4]
 8002536:	60a5      	str	r5, [r4, #8]
 8002538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800253c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002540:	2208      	movs	r2, #8
 8002542:	4629      	mov	r1, r5
 8002544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002548:	f000 f87a 	bl	8002640 <memset>
 800254c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002554:	e7e9      	b.n	800252a <__sfp+0x42>
 8002556:	bf00      	nop
 8002558:	08003700 	.word	0x08003700
 800255c:	ffff0001 	.word	0xffff0001

08002560 <_fwalk>:
 8002560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002564:	4688      	mov	r8, r1
 8002566:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800256a:	2600      	movs	r6, #0
 800256c:	b914      	cbnz	r4, 8002574 <_fwalk+0x14>
 800256e:	4630      	mov	r0, r6
 8002570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002574:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002578:	3f01      	subs	r7, #1
 800257a:	d501      	bpl.n	8002580 <_fwalk+0x20>
 800257c:	6824      	ldr	r4, [r4, #0]
 800257e:	e7f5      	b.n	800256c <_fwalk+0xc>
 8002580:	89ab      	ldrh	r3, [r5, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d906      	bls.n	8002594 <_fwalk+0x34>
 8002586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800258a:	3301      	adds	r3, #1
 800258c:	d002      	beq.n	8002594 <_fwalk+0x34>
 800258e:	4628      	mov	r0, r5
 8002590:	47c0      	blx	r8
 8002592:	4306      	orrs	r6, r0
 8002594:	3568      	adds	r5, #104	; 0x68
 8002596:	e7ef      	b.n	8002578 <_fwalk+0x18>

08002598 <_fwalk_reent>:
 8002598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800259c:	4680      	mov	r8, r0
 800259e:	4689      	mov	r9, r1
 80025a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80025a4:	2600      	movs	r6, #0
 80025a6:	b914      	cbnz	r4, 80025ae <_fwalk_reent+0x16>
 80025a8:	4630      	mov	r0, r6
 80025aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80025b2:	3f01      	subs	r7, #1
 80025b4:	d501      	bpl.n	80025ba <_fwalk_reent+0x22>
 80025b6:	6824      	ldr	r4, [r4, #0]
 80025b8:	e7f5      	b.n	80025a6 <_fwalk_reent+0xe>
 80025ba:	89ab      	ldrh	r3, [r5, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d907      	bls.n	80025d0 <_fwalk_reent+0x38>
 80025c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025c4:	3301      	adds	r3, #1
 80025c6:	d003      	beq.n	80025d0 <_fwalk_reent+0x38>
 80025c8:	4629      	mov	r1, r5
 80025ca:	4640      	mov	r0, r8
 80025cc:	47c8      	blx	r9
 80025ce:	4306      	orrs	r6, r0
 80025d0:	3568      	adds	r5, #104	; 0x68
 80025d2:	e7ee      	b.n	80025b2 <_fwalk_reent+0x1a>

080025d4 <getchar>:
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <getchar+0x20>)
 80025d6:	b510      	push	{r4, lr}
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	b124      	cbz	r4, 80025e6 <getchar+0x12>
 80025dc:	69a3      	ldr	r3, [r4, #24]
 80025de:	b913      	cbnz	r3, 80025e6 <getchar+0x12>
 80025e0:	4620      	mov	r0, r4
 80025e2:	f7ff ff51 	bl	8002488 <__sinit>
 80025e6:	6861      	ldr	r1, [r4, #4]
 80025e8:	4620      	mov	r0, r4
 80025ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025ee:	f000 ba9d 	b.w	8002b2c <_getc_r>
 80025f2:	bf00      	nop
 80025f4:	20000038 	.word	0x20000038

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	4e0d      	ldr	r6, [pc, #52]	; (8002630 <__libc_init_array+0x38>)
 80025fc:	4c0d      	ldr	r4, [pc, #52]	; (8002634 <__libc_init_array+0x3c>)
 80025fe:	1ba4      	subs	r4, r4, r6
 8002600:	10a4      	asrs	r4, r4, #2
 8002602:	2500      	movs	r5, #0
 8002604:	42a5      	cmp	r5, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	4e0b      	ldr	r6, [pc, #44]	; (8002638 <__libc_init_array+0x40>)
 800260a:	4c0c      	ldr	r4, [pc, #48]	; (800263c <__libc_init_array+0x44>)
 800260c:	f000 ff54 	bl	80034b8 <_init>
 8002610:	1ba4      	subs	r4, r4, r6
 8002612:	10a4      	asrs	r4, r4, #2
 8002614:	2500      	movs	r5, #0
 8002616:	42a5      	cmp	r5, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002620:	4798      	blx	r3
 8002622:	3501      	adds	r5, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800262a:	4798      	blx	r3
 800262c:	3501      	adds	r5, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	08003740 	.word	0x08003740
 8002634:	08003740 	.word	0x08003740
 8002638:	08003740 	.word	0x08003740
 800263c:	08003744 	.word	0x08003744

08002640 <memset>:
 8002640:	4402      	add	r2, r0
 8002642:	4603      	mov	r3, r0
 8002644:	4293      	cmp	r3, r2
 8002646:	d100      	bne.n	800264a <memset+0xa>
 8002648:	4770      	bx	lr
 800264a:	f803 1b01 	strb.w	r1, [r3], #1
 800264e:	e7f9      	b.n	8002644 <memset+0x4>

08002650 <_free_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	4605      	mov	r5, r0
 8002654:	2900      	cmp	r1, #0
 8002656:	d045      	beq.n	80026e4 <_free_r+0x94>
 8002658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800265c:	1f0c      	subs	r4, r1, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	bfb8      	it	lt
 8002662:	18e4      	addlt	r4, r4, r3
 8002664:	f000 fb04 	bl	8002c70 <__malloc_lock>
 8002668:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <_free_r+0x98>)
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	4610      	mov	r0, r2
 800266e:	b933      	cbnz	r3, 800267e <_free_r+0x2e>
 8002670:	6063      	str	r3, [r4, #4]
 8002672:	6014      	str	r4, [r2, #0]
 8002674:	4628      	mov	r0, r5
 8002676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800267a:	f000 bafa 	b.w	8002c72 <__malloc_unlock>
 800267e:	42a3      	cmp	r3, r4
 8002680:	d90c      	bls.n	800269c <_free_r+0x4c>
 8002682:	6821      	ldr	r1, [r4, #0]
 8002684:	1862      	adds	r2, r4, r1
 8002686:	4293      	cmp	r3, r2
 8002688:	bf04      	itt	eq
 800268a:	681a      	ldreq	r2, [r3, #0]
 800268c:	685b      	ldreq	r3, [r3, #4]
 800268e:	6063      	str	r3, [r4, #4]
 8002690:	bf04      	itt	eq
 8002692:	1852      	addeq	r2, r2, r1
 8002694:	6022      	streq	r2, [r4, #0]
 8002696:	6004      	str	r4, [r0, #0]
 8002698:	e7ec      	b.n	8002674 <_free_r+0x24>
 800269a:	4613      	mov	r3, r2
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	b10a      	cbz	r2, 80026a4 <_free_r+0x54>
 80026a0:	42a2      	cmp	r2, r4
 80026a2:	d9fa      	bls.n	800269a <_free_r+0x4a>
 80026a4:	6819      	ldr	r1, [r3, #0]
 80026a6:	1858      	adds	r0, r3, r1
 80026a8:	42a0      	cmp	r0, r4
 80026aa:	d10b      	bne.n	80026c4 <_free_r+0x74>
 80026ac:	6820      	ldr	r0, [r4, #0]
 80026ae:	4401      	add	r1, r0
 80026b0:	1858      	adds	r0, r3, r1
 80026b2:	4282      	cmp	r2, r0
 80026b4:	6019      	str	r1, [r3, #0]
 80026b6:	d1dd      	bne.n	8002674 <_free_r+0x24>
 80026b8:	6810      	ldr	r0, [r2, #0]
 80026ba:	6852      	ldr	r2, [r2, #4]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	4401      	add	r1, r0
 80026c0:	6019      	str	r1, [r3, #0]
 80026c2:	e7d7      	b.n	8002674 <_free_r+0x24>
 80026c4:	d902      	bls.n	80026cc <_free_r+0x7c>
 80026c6:	230c      	movs	r3, #12
 80026c8:	602b      	str	r3, [r5, #0]
 80026ca:	e7d3      	b.n	8002674 <_free_r+0x24>
 80026cc:	6820      	ldr	r0, [r4, #0]
 80026ce:	1821      	adds	r1, r4, r0
 80026d0:	428a      	cmp	r2, r1
 80026d2:	bf04      	itt	eq
 80026d4:	6811      	ldreq	r1, [r2, #0]
 80026d6:	6852      	ldreq	r2, [r2, #4]
 80026d8:	6062      	str	r2, [r4, #4]
 80026da:	bf04      	itt	eq
 80026dc:	1809      	addeq	r1, r1, r0
 80026de:	6021      	streq	r1, [r4, #0]
 80026e0:	605c      	str	r4, [r3, #4]
 80026e2:	e7c7      	b.n	8002674 <_free_r+0x24>
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	bf00      	nop
 80026e8:	200000bc 	.word	0x200000bc

080026ec <_malloc_r>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	1ccd      	adds	r5, r1, #3
 80026f0:	f025 0503 	bic.w	r5, r5, #3
 80026f4:	3508      	adds	r5, #8
 80026f6:	2d0c      	cmp	r5, #12
 80026f8:	bf38      	it	cc
 80026fa:	250c      	movcc	r5, #12
 80026fc:	2d00      	cmp	r5, #0
 80026fe:	4606      	mov	r6, r0
 8002700:	db01      	blt.n	8002706 <_malloc_r+0x1a>
 8002702:	42a9      	cmp	r1, r5
 8002704:	d903      	bls.n	800270e <_malloc_r+0x22>
 8002706:	230c      	movs	r3, #12
 8002708:	6033      	str	r3, [r6, #0]
 800270a:	2000      	movs	r0, #0
 800270c:	bd70      	pop	{r4, r5, r6, pc}
 800270e:	f000 faaf 	bl	8002c70 <__malloc_lock>
 8002712:	4a21      	ldr	r2, [pc, #132]	; (8002798 <_malloc_r+0xac>)
 8002714:	6814      	ldr	r4, [r2, #0]
 8002716:	4621      	mov	r1, r4
 8002718:	b991      	cbnz	r1, 8002740 <_malloc_r+0x54>
 800271a:	4c20      	ldr	r4, [pc, #128]	; (800279c <_malloc_r+0xb0>)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	b91b      	cbnz	r3, 8002728 <_malloc_r+0x3c>
 8002720:	4630      	mov	r0, r6
 8002722:	f000 f8cd 	bl	80028c0 <_sbrk_r>
 8002726:	6020      	str	r0, [r4, #0]
 8002728:	4629      	mov	r1, r5
 800272a:	4630      	mov	r0, r6
 800272c:	f000 f8c8 	bl	80028c0 <_sbrk_r>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d124      	bne.n	800277e <_malloc_r+0x92>
 8002734:	230c      	movs	r3, #12
 8002736:	6033      	str	r3, [r6, #0]
 8002738:	4630      	mov	r0, r6
 800273a:	f000 fa9a 	bl	8002c72 <__malloc_unlock>
 800273e:	e7e4      	b.n	800270a <_malloc_r+0x1e>
 8002740:	680b      	ldr	r3, [r1, #0]
 8002742:	1b5b      	subs	r3, r3, r5
 8002744:	d418      	bmi.n	8002778 <_malloc_r+0x8c>
 8002746:	2b0b      	cmp	r3, #11
 8002748:	d90f      	bls.n	800276a <_malloc_r+0x7e>
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	50cd      	str	r5, [r1, r3]
 800274e:	18cc      	adds	r4, r1, r3
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fa8e 	bl	8002c72 <__malloc_unlock>
 8002756:	f104 000b 	add.w	r0, r4, #11
 800275a:	1d23      	adds	r3, r4, #4
 800275c:	f020 0007 	bic.w	r0, r0, #7
 8002760:	1ac3      	subs	r3, r0, r3
 8002762:	d0d3      	beq.n	800270c <_malloc_r+0x20>
 8002764:	425a      	negs	r2, r3
 8002766:	50e2      	str	r2, [r4, r3]
 8002768:	e7d0      	b.n	800270c <_malloc_r+0x20>
 800276a:	428c      	cmp	r4, r1
 800276c:	684b      	ldr	r3, [r1, #4]
 800276e:	bf16      	itet	ne
 8002770:	6063      	strne	r3, [r4, #4]
 8002772:	6013      	streq	r3, [r2, #0]
 8002774:	460c      	movne	r4, r1
 8002776:	e7eb      	b.n	8002750 <_malloc_r+0x64>
 8002778:	460c      	mov	r4, r1
 800277a:	6849      	ldr	r1, [r1, #4]
 800277c:	e7cc      	b.n	8002718 <_malloc_r+0x2c>
 800277e:	1cc4      	adds	r4, r0, #3
 8002780:	f024 0403 	bic.w	r4, r4, #3
 8002784:	42a0      	cmp	r0, r4
 8002786:	d005      	beq.n	8002794 <_malloc_r+0xa8>
 8002788:	1a21      	subs	r1, r4, r0
 800278a:	4630      	mov	r0, r6
 800278c:	f000 f898 	bl	80028c0 <_sbrk_r>
 8002790:	3001      	adds	r0, #1
 8002792:	d0cf      	beq.n	8002734 <_malloc_r+0x48>
 8002794:	6025      	str	r5, [r4, #0]
 8002796:	e7db      	b.n	8002750 <_malloc_r+0x64>
 8002798:	200000bc 	.word	0x200000bc
 800279c:	200000c0 	.word	0x200000c0

080027a0 <iprintf>:
 80027a0:	b40f      	push	{r0, r1, r2, r3}
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <iprintf+0x2c>)
 80027a4:	b513      	push	{r0, r1, r4, lr}
 80027a6:	681c      	ldr	r4, [r3, #0]
 80027a8:	b124      	cbz	r4, 80027b4 <iprintf+0x14>
 80027aa:	69a3      	ldr	r3, [r4, #24]
 80027ac:	b913      	cbnz	r3, 80027b4 <iprintf+0x14>
 80027ae:	4620      	mov	r0, r4
 80027b0:	f7ff fe6a 	bl	8002488 <__sinit>
 80027b4:	ab05      	add	r3, sp, #20
 80027b6:	9a04      	ldr	r2, [sp, #16]
 80027b8:	68a1      	ldr	r1, [r4, #8]
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	4620      	mov	r0, r4
 80027be:	f000 fa83 	bl	8002cc8 <_vfiprintf_r>
 80027c2:	b002      	add	sp, #8
 80027c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c8:	b004      	add	sp, #16
 80027ca:	4770      	bx	lr
 80027cc:	20000038 	.word	0x20000038

080027d0 <putchar>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <putchar+0x24>)
 80027d4:	681c      	ldr	r4, [r3, #0]
 80027d6:	4605      	mov	r5, r0
 80027d8:	b124      	cbz	r4, 80027e4 <putchar+0x14>
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	b913      	cbnz	r3, 80027e4 <putchar+0x14>
 80027de:	4620      	mov	r0, r4
 80027e0:	f7ff fe52 	bl	8002488 <__sinit>
 80027e4:	68a2      	ldr	r2, [r4, #8]
 80027e6:	4629      	mov	r1, r5
 80027e8:	4620      	mov	r0, r4
 80027ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ee:	f000 bd09 	b.w	8003204 <_putc_r>
 80027f2:	bf00      	nop
 80027f4:	20000038 	.word	0x20000038

080027f8 <_puts_r>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	460e      	mov	r6, r1
 80027fc:	4605      	mov	r5, r0
 80027fe:	b118      	cbz	r0, 8002808 <_puts_r+0x10>
 8002800:	6983      	ldr	r3, [r0, #24]
 8002802:	b90b      	cbnz	r3, 8002808 <_puts_r+0x10>
 8002804:	f7ff fe40 	bl	8002488 <__sinit>
 8002808:	69ab      	ldr	r3, [r5, #24]
 800280a:	68ac      	ldr	r4, [r5, #8]
 800280c:	b913      	cbnz	r3, 8002814 <_puts_r+0x1c>
 800280e:	4628      	mov	r0, r5
 8002810:	f7ff fe3a 	bl	8002488 <__sinit>
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <_puts_r+0xac>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d117      	bne.n	800284a <_puts_r+0x52>
 800281a:	686c      	ldr	r4, [r5, #4]
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	071b      	lsls	r3, r3, #28
 8002820:	d51d      	bpl.n	800285e <_puts_r+0x66>
 8002822:	6923      	ldr	r3, [r4, #16]
 8002824:	b1db      	cbz	r3, 800285e <_puts_r+0x66>
 8002826:	3e01      	subs	r6, #1
 8002828:	68a3      	ldr	r3, [r4, #8]
 800282a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800282e:	3b01      	subs	r3, #1
 8002830:	60a3      	str	r3, [r4, #8]
 8002832:	b9e9      	cbnz	r1, 8002870 <_puts_r+0x78>
 8002834:	2b00      	cmp	r3, #0
 8002836:	da2e      	bge.n	8002896 <_puts_r+0x9e>
 8002838:	4622      	mov	r2, r4
 800283a:	210a      	movs	r1, #10
 800283c:	4628      	mov	r0, r5
 800283e:	f000 f893 	bl	8002968 <__swbuf_r>
 8002842:	3001      	adds	r0, #1
 8002844:	d011      	beq.n	800286a <_puts_r+0x72>
 8002846:	200a      	movs	r0, #10
 8002848:	e011      	b.n	800286e <_puts_r+0x76>
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <_puts_r+0xb0>)
 800284c:	429c      	cmp	r4, r3
 800284e:	d101      	bne.n	8002854 <_puts_r+0x5c>
 8002850:	68ac      	ldr	r4, [r5, #8]
 8002852:	e7e3      	b.n	800281c <_puts_r+0x24>
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <_puts_r+0xb4>)
 8002856:	429c      	cmp	r4, r3
 8002858:	bf08      	it	eq
 800285a:	68ec      	ldreq	r4, [r5, #12]
 800285c:	e7de      	b.n	800281c <_puts_r+0x24>
 800285e:	4621      	mov	r1, r4
 8002860:	4628      	mov	r0, r5
 8002862:	f000 f8e5 	bl	8002a30 <__swsetup_r>
 8002866:	2800      	cmp	r0, #0
 8002868:	d0dd      	beq.n	8002826 <_puts_r+0x2e>
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	2b00      	cmp	r3, #0
 8002872:	da04      	bge.n	800287e <_puts_r+0x86>
 8002874:	69a2      	ldr	r2, [r4, #24]
 8002876:	429a      	cmp	r2, r3
 8002878:	dc06      	bgt.n	8002888 <_puts_r+0x90>
 800287a:	290a      	cmp	r1, #10
 800287c:	d004      	beq.n	8002888 <_puts_r+0x90>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	6022      	str	r2, [r4, #0]
 8002884:	7019      	strb	r1, [r3, #0]
 8002886:	e7cf      	b.n	8002828 <_puts_r+0x30>
 8002888:	4622      	mov	r2, r4
 800288a:	4628      	mov	r0, r5
 800288c:	f000 f86c 	bl	8002968 <__swbuf_r>
 8002890:	3001      	adds	r0, #1
 8002892:	d1c9      	bne.n	8002828 <_puts_r+0x30>
 8002894:	e7e9      	b.n	800286a <_puts_r+0x72>
 8002896:	6823      	ldr	r3, [r4, #0]
 8002898:	200a      	movs	r0, #10
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	6022      	str	r2, [r4, #0]
 800289e:	7018      	strb	r0, [r3, #0]
 80028a0:	e7e5      	b.n	800286e <_puts_r+0x76>
 80028a2:	bf00      	nop
 80028a4:	080036c0 	.word	0x080036c0
 80028a8:	080036e0 	.word	0x080036e0
 80028ac:	080036a0 	.word	0x080036a0

080028b0 <puts>:
 80028b0:	4b02      	ldr	r3, [pc, #8]	; (80028bc <puts+0xc>)
 80028b2:	4601      	mov	r1, r0
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	f7ff bf9f 	b.w	80027f8 <_puts_r>
 80028ba:	bf00      	nop
 80028bc:	20000038 	.word	0x20000038

080028c0 <_sbrk_r>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	4c06      	ldr	r4, [pc, #24]	; (80028dc <_sbrk_r+0x1c>)
 80028c4:	2300      	movs	r3, #0
 80028c6:	4605      	mov	r5, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	f000 fde6 	bl	800349c <_sbrk>
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	d102      	bne.n	80028da <_sbrk_r+0x1a>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	b103      	cbz	r3, 80028da <_sbrk_r+0x1a>
 80028d8:	602b      	str	r3, [r5, #0]
 80028da:	bd38      	pop	{r3, r4, r5, pc}
 80028dc:	200001b8 	.word	0x200001b8

080028e0 <__sread>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	460c      	mov	r4, r1
 80028e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e8:	f000 fcc2 	bl	8003270 <_read_r>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	bfab      	itete	ge
 80028f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028f2:	89a3      	ldrhlt	r3, [r4, #12]
 80028f4:	181b      	addge	r3, r3, r0
 80028f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028fa:	bfac      	ite	ge
 80028fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80028fe:	81a3      	strhlt	r3, [r4, #12]
 8002900:	bd10      	pop	{r4, pc}

08002902 <__swrite>:
 8002902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002906:	461f      	mov	r7, r3
 8002908:	898b      	ldrh	r3, [r1, #12]
 800290a:	05db      	lsls	r3, r3, #23
 800290c:	4605      	mov	r5, r0
 800290e:	460c      	mov	r4, r1
 8002910:	4616      	mov	r6, r2
 8002912:	d505      	bpl.n	8002920 <__swrite+0x1e>
 8002914:	2302      	movs	r3, #2
 8002916:	2200      	movs	r2, #0
 8002918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291c:	f000 f932 	bl	8002b84 <_lseek_r>
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002926:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800292a:	81a3      	strh	r3, [r4, #12]
 800292c:	4632      	mov	r2, r6
 800292e:	463b      	mov	r3, r7
 8002930:	4628      	mov	r0, r5
 8002932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002936:	f000 b869 	b.w	8002a0c <_write_r>

0800293a <__sseek>:
 800293a:	b510      	push	{r4, lr}
 800293c:	460c      	mov	r4, r1
 800293e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002942:	f000 f91f 	bl	8002b84 <_lseek_r>
 8002946:	1c43      	adds	r3, r0, #1
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	bf15      	itete	ne
 800294c:	6560      	strne	r0, [r4, #84]	; 0x54
 800294e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002956:	81a3      	strheq	r3, [r4, #12]
 8002958:	bf18      	it	ne
 800295a:	81a3      	strhne	r3, [r4, #12]
 800295c:	bd10      	pop	{r4, pc}

0800295e <__sclose>:
 800295e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002962:	f000 b8d3 	b.w	8002b0c <_close_r>
	...

08002968 <__swbuf_r>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	460e      	mov	r6, r1
 800296c:	4614      	mov	r4, r2
 800296e:	4605      	mov	r5, r0
 8002970:	b118      	cbz	r0, 800297a <__swbuf_r+0x12>
 8002972:	6983      	ldr	r3, [r0, #24]
 8002974:	b90b      	cbnz	r3, 800297a <__swbuf_r+0x12>
 8002976:	f7ff fd87 	bl	8002488 <__sinit>
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <__swbuf_r+0x98>)
 800297c:	429c      	cmp	r4, r3
 800297e:	d12a      	bne.n	80029d6 <__swbuf_r+0x6e>
 8002980:	686c      	ldr	r4, [r5, #4]
 8002982:	69a3      	ldr	r3, [r4, #24]
 8002984:	60a3      	str	r3, [r4, #8]
 8002986:	89a3      	ldrh	r3, [r4, #12]
 8002988:	071a      	lsls	r2, r3, #28
 800298a:	d52e      	bpl.n	80029ea <__swbuf_r+0x82>
 800298c:	6923      	ldr	r3, [r4, #16]
 800298e:	b363      	cbz	r3, 80029ea <__swbuf_r+0x82>
 8002990:	6923      	ldr	r3, [r4, #16]
 8002992:	6820      	ldr	r0, [r4, #0]
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	6963      	ldr	r3, [r4, #20]
 8002998:	b2f6      	uxtb	r6, r6
 800299a:	4283      	cmp	r3, r0
 800299c:	4637      	mov	r7, r6
 800299e:	dc04      	bgt.n	80029aa <__swbuf_r+0x42>
 80029a0:	4621      	mov	r1, r4
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7ff fcf4 	bl	8002390 <_fflush_r>
 80029a8:	bb28      	cbnz	r0, 80029f6 <__swbuf_r+0x8e>
 80029aa:	68a3      	ldr	r3, [r4, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60a3      	str	r3, [r4, #8]
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	6022      	str	r2, [r4, #0]
 80029b6:	701e      	strb	r6, [r3, #0]
 80029b8:	6963      	ldr	r3, [r4, #20]
 80029ba:	3001      	adds	r0, #1
 80029bc:	4283      	cmp	r3, r0
 80029be:	d004      	beq.n	80029ca <__swbuf_r+0x62>
 80029c0:	89a3      	ldrh	r3, [r4, #12]
 80029c2:	07db      	lsls	r3, r3, #31
 80029c4:	d519      	bpl.n	80029fa <__swbuf_r+0x92>
 80029c6:	2e0a      	cmp	r6, #10
 80029c8:	d117      	bne.n	80029fa <__swbuf_r+0x92>
 80029ca:	4621      	mov	r1, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	f7ff fcdf 	bl	8002390 <_fflush_r>
 80029d2:	b190      	cbz	r0, 80029fa <__swbuf_r+0x92>
 80029d4:	e00f      	b.n	80029f6 <__swbuf_r+0x8e>
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <__swbuf_r+0x9c>)
 80029d8:	429c      	cmp	r4, r3
 80029da:	d101      	bne.n	80029e0 <__swbuf_r+0x78>
 80029dc:	68ac      	ldr	r4, [r5, #8]
 80029de:	e7d0      	b.n	8002982 <__swbuf_r+0x1a>
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <__swbuf_r+0xa0>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	bf08      	it	eq
 80029e6:	68ec      	ldreq	r4, [r5, #12]
 80029e8:	e7cb      	b.n	8002982 <__swbuf_r+0x1a>
 80029ea:	4621      	mov	r1, r4
 80029ec:	4628      	mov	r0, r5
 80029ee:	f000 f81f 	bl	8002a30 <__swsetup_r>
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d0cc      	beq.n	8002990 <__swbuf_r+0x28>
 80029f6:	f04f 37ff 	mov.w	r7, #4294967295
 80029fa:	4638      	mov	r0, r7
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	080036c0 	.word	0x080036c0
 8002a04:	080036e0 	.word	0x080036e0
 8002a08:	080036a0 	.word	0x080036a0

08002a0c <_write_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4c07      	ldr	r4, [pc, #28]	; (8002a2c <_write_r+0x20>)
 8002a10:	4605      	mov	r5, r0
 8002a12:	4608      	mov	r0, r1
 8002a14:	4611      	mov	r1, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f7fe f816 	bl	8000a4c <_write>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_write_r+0x1e>
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_write_r+0x1e>
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	200001b8 	.word	0x200001b8

08002a30 <__swsetup_r>:
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <__swsetup_r+0xcc>)
 8002a32:	b570      	push	{r4, r5, r6, lr}
 8002a34:	681d      	ldr	r5, [r3, #0]
 8002a36:	4606      	mov	r6, r0
 8002a38:	460c      	mov	r4, r1
 8002a3a:	b125      	cbz	r5, 8002a46 <__swsetup_r+0x16>
 8002a3c:	69ab      	ldr	r3, [r5, #24]
 8002a3e:	b913      	cbnz	r3, 8002a46 <__swsetup_r+0x16>
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7ff fd21 	bl	8002488 <__sinit>
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <__swsetup_r+0xd0>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d10f      	bne.n	8002a6c <__swsetup_r+0x3c>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	0715      	lsls	r5, r2, #28
 8002a56:	d42c      	bmi.n	8002ab2 <__swsetup_r+0x82>
 8002a58:	06d0      	lsls	r0, r2, #27
 8002a5a:	d411      	bmi.n	8002a80 <__swsetup_r+0x50>
 8002a5c:	2209      	movs	r2, #9
 8002a5e:	6032      	str	r2, [r6, #0]
 8002a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6a:	e03e      	b.n	8002aea <__swsetup_r+0xba>
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <__swsetup_r+0xd4>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d101      	bne.n	8002a76 <__swsetup_r+0x46>
 8002a72:	68ac      	ldr	r4, [r5, #8]
 8002a74:	e7eb      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <__swsetup_r+0xd8>)
 8002a78:	429c      	cmp	r4, r3
 8002a7a:	bf08      	it	eq
 8002a7c:	68ec      	ldreq	r4, [r5, #12]
 8002a7e:	e7e6      	b.n	8002a4e <__swsetup_r+0x1e>
 8002a80:	0751      	lsls	r1, r2, #29
 8002a82:	d512      	bpl.n	8002aaa <__swsetup_r+0x7a>
 8002a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a86:	b141      	cbz	r1, 8002a9a <__swsetup_r+0x6a>
 8002a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d002      	beq.n	8002a96 <__swsetup_r+0x66>
 8002a90:	4630      	mov	r0, r6
 8002a92:	f7ff fddd 	bl	8002650 <_free_r>
 8002a96:	2300      	movs	r3, #0
 8002a98:	6363      	str	r3, [r4, #52]	; 0x34
 8002a9a:	89a3      	ldrh	r3, [r4, #12]
 8002a9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6063      	str	r3, [r4, #4]
 8002aa6:	6923      	ldr	r3, [r4, #16]
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	f043 0308 	orr.w	r3, r3, #8
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	6923      	ldr	r3, [r4, #16]
 8002ab4:	b94b      	cbnz	r3, 8002aca <__swsetup_r+0x9a>
 8002ab6:	89a3      	ldrh	r3, [r4, #12]
 8002ab8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac0:	d003      	beq.n	8002aca <__swsetup_r+0x9a>
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	f000 f893 	bl	8002bf0 <__smakebuf_r>
 8002aca:	89a2      	ldrh	r2, [r4, #12]
 8002acc:	f012 0301 	ands.w	r3, r2, #1
 8002ad0:	d00c      	beq.n	8002aec <__swsetup_r+0xbc>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	6963      	ldr	r3, [r4, #20]
 8002ad8:	425b      	negs	r3, r3
 8002ada:	61a3      	str	r3, [r4, #24]
 8002adc:	6923      	ldr	r3, [r4, #16]
 8002ade:	b953      	cbnz	r3, 8002af6 <__swsetup_r+0xc6>
 8002ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ae8:	d1ba      	bne.n	8002a60 <__swsetup_r+0x30>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	0792      	lsls	r2, r2, #30
 8002aee:	bf58      	it	pl
 8002af0:	6963      	ldrpl	r3, [r4, #20]
 8002af2:	60a3      	str	r3, [r4, #8]
 8002af4:	e7f2      	b.n	8002adc <__swsetup_r+0xac>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e7f7      	b.n	8002aea <__swsetup_r+0xba>
 8002afa:	bf00      	nop
 8002afc:	20000038 	.word	0x20000038
 8002b00:	080036c0 	.word	0x080036c0
 8002b04:	080036e0 	.word	0x080036e0
 8002b08:	080036a0 	.word	0x080036a0

08002b0c <_close_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4c06      	ldr	r4, [pc, #24]	; (8002b28 <_close_r+0x1c>)
 8002b10:	2300      	movs	r3, #0
 8002b12:	4605      	mov	r5, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	6023      	str	r3, [r4, #0]
 8002b18:	f000 fca0 	bl	800345c <_close>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_close_r+0x1a>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_close_r+0x1a>
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	200001b8 	.word	0x200001b8

08002b2c <_getc_r>:
 8002b2c:	b538      	push	{r3, r4, r5, lr}
 8002b2e:	460c      	mov	r4, r1
 8002b30:	4605      	mov	r5, r0
 8002b32:	b118      	cbz	r0, 8002b3c <_getc_r+0x10>
 8002b34:	6983      	ldr	r3, [r0, #24]
 8002b36:	b90b      	cbnz	r3, 8002b3c <_getc_r+0x10>
 8002b38:	f7ff fca6 	bl	8002488 <__sinit>
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <_getc_r+0x4c>)
 8002b3e:	429c      	cmp	r4, r3
 8002b40:	d10b      	bne.n	8002b5a <_getc_r+0x2e>
 8002b42:	686c      	ldr	r4, [r5, #4]
 8002b44:	6863      	ldr	r3, [r4, #4]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	6063      	str	r3, [r4, #4]
 8002b4c:	da0f      	bge.n	8002b6e <_getc_r+0x42>
 8002b4e:	4621      	mov	r1, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b56:	f000 bb9d 	b.w	8003294 <__srget_r>
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_getc_r+0x50>)
 8002b5c:	429c      	cmp	r4, r3
 8002b5e:	d101      	bne.n	8002b64 <_getc_r+0x38>
 8002b60:	68ac      	ldr	r4, [r5, #8]
 8002b62:	e7ef      	b.n	8002b44 <_getc_r+0x18>
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <_getc_r+0x54>)
 8002b66:	429c      	cmp	r4, r3
 8002b68:	bf08      	it	eq
 8002b6a:	68ec      	ldreq	r4, [r5, #12]
 8002b6c:	e7ea      	b.n	8002b44 <_getc_r+0x18>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	6022      	str	r2, [r4, #0]
 8002b74:	7818      	ldrb	r0, [r3, #0]
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
 8002b78:	080036c0 	.word	0x080036c0
 8002b7c:	080036e0 	.word	0x080036e0
 8002b80:	080036a0 	.word	0x080036a0

08002b84 <_lseek_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4c07      	ldr	r4, [pc, #28]	; (8002ba4 <_lseek_r+0x20>)
 8002b88:	4605      	mov	r5, r0
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	6022      	str	r2, [r4, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 fc7a 	bl	800348c <_lseek>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_lseek_r+0x1e>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_lseek_r+0x1e>
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	200001b8 	.word	0x200001b8

08002ba8 <__swhatbuf_r>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	460e      	mov	r6, r1
 8002bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	b096      	sub	sp, #88	; 0x58
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	461d      	mov	r5, r3
 8002bb8:	da07      	bge.n	8002bca <__swhatbuf_r+0x22>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	89b3      	ldrh	r3, [r6, #12]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	d410      	bmi.n	8002be6 <__swhatbuf_r+0x3e>
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	e00e      	b.n	8002be8 <__swhatbuf_r+0x40>
 8002bca:	466a      	mov	r2, sp
 8002bcc:	f000 fb8e 	bl	80032ec <_fstat_r>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	dbf2      	blt.n	8002bba <__swhatbuf_r+0x12>
 8002bd4:	9a01      	ldr	r2, [sp, #4]
 8002bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bde:	425a      	negs	r2, r3
 8002be0:	415a      	adcs	r2, r3
 8002be2:	602a      	str	r2, [r5, #0]
 8002be4:	e7ee      	b.n	8002bc4 <__swhatbuf_r+0x1c>
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	2000      	movs	r0, #0
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	b016      	add	sp, #88	; 0x58
 8002bee:	bd70      	pop	{r4, r5, r6, pc}

08002bf0 <__smakebuf_r>:
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bf4:	079d      	lsls	r5, r3, #30
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	d507      	bpl.n	8002c0c <__smakebuf_r+0x1c>
 8002bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c00:	6023      	str	r3, [r4, #0]
 8002c02:	6123      	str	r3, [r4, #16]
 8002c04:	2301      	movs	r3, #1
 8002c06:	6163      	str	r3, [r4, #20]
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	ab01      	add	r3, sp, #4
 8002c0e:	466a      	mov	r2, sp
 8002c10:	f7ff ffca 	bl	8002ba8 <__swhatbuf_r>
 8002c14:	9900      	ldr	r1, [sp, #0]
 8002c16:	4605      	mov	r5, r0
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f7ff fd67 	bl	80026ec <_malloc_r>
 8002c1e:	b948      	cbnz	r0, 8002c34 <__smakebuf_r+0x44>
 8002c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c24:	059a      	lsls	r2, r3, #22
 8002c26:	d4ef      	bmi.n	8002c08 <__smakebuf_r+0x18>
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	e7e3      	b.n	8002bfc <__smakebuf_r+0xc>
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <__smakebuf_r+0x7c>)
 8002c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	6020      	str	r0, [r4, #0]
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	81a3      	strh	r3, [r4, #12]
 8002c42:	9b00      	ldr	r3, [sp, #0]
 8002c44:	6163      	str	r3, [r4, #20]
 8002c46:	9b01      	ldr	r3, [sp, #4]
 8002c48:	6120      	str	r0, [r4, #16]
 8002c4a:	b15b      	cbz	r3, 8002c64 <__smakebuf_r+0x74>
 8002c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 fb5d 	bl	8003310 <_isatty_r>
 8002c56:	b128      	cbz	r0, 8002c64 <__smakebuf_r+0x74>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	431d      	orrs	r5, r3
 8002c68:	81a5      	strh	r5, [r4, #12]
 8002c6a:	e7cd      	b.n	8002c08 <__smakebuf_r+0x18>
 8002c6c:	08002451 	.word	0x08002451

08002c70 <__malloc_lock>:
 8002c70:	4770      	bx	lr

08002c72 <__malloc_unlock>:
 8002c72:	4770      	bx	lr

08002c74 <__sfputc_r>:
 8002c74:	6893      	ldr	r3, [r2, #8]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	b410      	push	{r4}
 8002c7c:	6093      	str	r3, [r2, #8]
 8002c7e:	da08      	bge.n	8002c92 <__sfputc_r+0x1e>
 8002c80:	6994      	ldr	r4, [r2, #24]
 8002c82:	42a3      	cmp	r3, r4
 8002c84:	db01      	blt.n	8002c8a <__sfputc_r+0x16>
 8002c86:	290a      	cmp	r1, #10
 8002c88:	d103      	bne.n	8002c92 <__sfputc_r+0x1e>
 8002c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c8e:	f7ff be6b 	b.w	8002968 <__swbuf_r>
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	1c58      	adds	r0, r3, #1
 8002c96:	6010      	str	r0, [r2, #0]
 8002c98:	7019      	strb	r1, [r3, #0]
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <__sfputs_r>:
 8002ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca4:	4606      	mov	r6, r0
 8002ca6:	460f      	mov	r7, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	18d5      	adds	r5, r2, r3
 8002cac:	42ac      	cmp	r4, r5
 8002cae:	d101      	bne.n	8002cb4 <__sfputs_r+0x12>
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e007      	b.n	8002cc4 <__sfputs_r+0x22>
 8002cb4:	463a      	mov	r2, r7
 8002cb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f7ff ffda 	bl	8002c74 <__sfputc_r>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d1f3      	bne.n	8002cac <__sfputs_r+0xa>
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cc8 <_vfiprintf_r>:
 8002cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ccc:	460c      	mov	r4, r1
 8002cce:	b09d      	sub	sp, #116	; 0x74
 8002cd0:	4617      	mov	r7, r2
 8002cd2:	461d      	mov	r5, r3
 8002cd4:	4606      	mov	r6, r0
 8002cd6:	b118      	cbz	r0, 8002ce0 <_vfiprintf_r+0x18>
 8002cd8:	6983      	ldr	r3, [r0, #24]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <_vfiprintf_r+0x18>
 8002cdc:	f7ff fbd4 	bl	8002488 <__sinit>
 8002ce0:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <_vfiprintf_r+0x20c>)
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d158      	bne.n	8002d98 <_vfiprintf_r+0xd0>
 8002ce6:	6874      	ldr	r4, [r6, #4]
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	0718      	lsls	r0, r3, #28
 8002cec:	d55e      	bpl.n	8002dac <_vfiprintf_r+0xe4>
 8002cee:	6923      	ldr	r3, [r4, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <_vfiprintf_r+0xe4>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cfe:	2330      	movs	r3, #48	; 0x30
 8002d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d04:	9503      	str	r5, [sp, #12]
 8002d06:	f04f 0b01 	mov.w	fp, #1
 8002d0a:	46b8      	mov	r8, r7
 8002d0c:	4645      	mov	r5, r8
 8002d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d12:	b10b      	cbz	r3, 8002d18 <_vfiprintf_r+0x50>
 8002d14:	2b25      	cmp	r3, #37	; 0x25
 8002d16:	d154      	bne.n	8002dc2 <_vfiprintf_r+0xfa>
 8002d18:	ebb8 0a07 	subs.w	sl, r8, r7
 8002d1c:	d00b      	beq.n	8002d36 <_vfiprintf_r+0x6e>
 8002d1e:	4653      	mov	r3, sl
 8002d20:	463a      	mov	r2, r7
 8002d22:	4621      	mov	r1, r4
 8002d24:	4630      	mov	r0, r6
 8002d26:	f7ff ffbc 	bl	8002ca2 <__sfputs_r>
 8002d2a:	3001      	adds	r0, #1
 8002d2c:	f000 80c2 	beq.w	8002eb4 <_vfiprintf_r+0x1ec>
 8002d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d32:	4453      	add	r3, sl
 8002d34:	9309      	str	r3, [sp, #36]	; 0x24
 8002d36:	f898 3000 	ldrb.w	r3, [r8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80ba 	beq.w	8002eb4 <_vfiprintf_r+0x1ec>
 8002d40:	2300      	movs	r3, #0
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	9307      	str	r3, [sp, #28]
 8002d4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d52:	931a      	str	r3, [sp, #104]	; 0x68
 8002d54:	46a8      	mov	r8, r5
 8002d56:	2205      	movs	r2, #5
 8002d58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002d5c:	485e      	ldr	r0, [pc, #376]	; (8002ed8 <_vfiprintf_r+0x210>)
 8002d5e:	f7fd fa6f 	bl	8000240 <memchr>
 8002d62:	9b04      	ldr	r3, [sp, #16]
 8002d64:	bb78      	cbnz	r0, 8002dc6 <_vfiprintf_r+0xfe>
 8002d66:	06d9      	lsls	r1, r3, #27
 8002d68:	bf44      	itt	mi
 8002d6a:	2220      	movmi	r2, #32
 8002d6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d70:	071a      	lsls	r2, r3, #28
 8002d72:	bf44      	itt	mi
 8002d74:	222b      	movmi	r2, #43	; 0x2b
 8002d76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d7a:	782a      	ldrb	r2, [r5, #0]
 8002d7c:	2a2a      	cmp	r2, #42	; 0x2a
 8002d7e:	d02a      	beq.n	8002dd6 <_vfiprintf_r+0x10e>
 8002d80:	9a07      	ldr	r2, [sp, #28]
 8002d82:	46a8      	mov	r8, r5
 8002d84:	2000      	movs	r0, #0
 8002d86:	250a      	movs	r5, #10
 8002d88:	4641      	mov	r1, r8
 8002d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d8e:	3b30      	subs	r3, #48	; 0x30
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d969      	bls.n	8002e68 <_vfiprintf_r+0x1a0>
 8002d94:	b360      	cbz	r0, 8002df0 <_vfiprintf_r+0x128>
 8002d96:	e024      	b.n	8002de2 <_vfiprintf_r+0x11a>
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <_vfiprintf_r+0x214>)
 8002d9a:	429c      	cmp	r4, r3
 8002d9c:	d101      	bne.n	8002da2 <_vfiprintf_r+0xda>
 8002d9e:	68b4      	ldr	r4, [r6, #8]
 8002da0:	e7a2      	b.n	8002ce8 <_vfiprintf_r+0x20>
 8002da2:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <_vfiprintf_r+0x218>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	bf08      	it	eq
 8002da8:	68f4      	ldreq	r4, [r6, #12]
 8002daa:	e79d      	b.n	8002ce8 <_vfiprintf_r+0x20>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff fe3e 	bl	8002a30 <__swsetup_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d09d      	beq.n	8002cf4 <_vfiprintf_r+0x2c>
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	b01d      	add	sp, #116	; 0x74
 8002dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc2:	46a8      	mov	r8, r5
 8002dc4:	e7a2      	b.n	8002d0c <_vfiprintf_r+0x44>
 8002dc6:	4a44      	ldr	r2, [pc, #272]	; (8002ed8 <_vfiprintf_r+0x210>)
 8002dc8:	1a80      	subs	r0, r0, r2
 8002dca:	fa0b f000 	lsl.w	r0, fp, r0
 8002dce:	4318      	orrs	r0, r3
 8002dd0:	9004      	str	r0, [sp, #16]
 8002dd2:	4645      	mov	r5, r8
 8002dd4:	e7be      	b.n	8002d54 <_vfiprintf_r+0x8c>
 8002dd6:	9a03      	ldr	r2, [sp, #12]
 8002dd8:	1d11      	adds	r1, r2, #4
 8002dda:	6812      	ldr	r2, [r2, #0]
 8002ddc:	9103      	str	r1, [sp, #12]
 8002dde:	2a00      	cmp	r2, #0
 8002de0:	db01      	blt.n	8002de6 <_vfiprintf_r+0x11e>
 8002de2:	9207      	str	r2, [sp, #28]
 8002de4:	e004      	b.n	8002df0 <_vfiprintf_r+0x128>
 8002de6:	4252      	negs	r2, r2
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	9207      	str	r2, [sp, #28]
 8002dee:	9304      	str	r3, [sp, #16]
 8002df0:	f898 3000 	ldrb.w	r3, [r8]
 8002df4:	2b2e      	cmp	r3, #46	; 0x2e
 8002df6:	d10e      	bne.n	8002e16 <_vfiprintf_r+0x14e>
 8002df8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dfe:	d138      	bne.n	8002e72 <_vfiprintf_r+0x1aa>
 8002e00:	9b03      	ldr	r3, [sp, #12]
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	9203      	str	r2, [sp, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bfb8      	it	lt
 8002e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e10:	f108 0802 	add.w	r8, r8, #2
 8002e14:	9305      	str	r3, [sp, #20]
 8002e16:	4d33      	ldr	r5, [pc, #204]	; (8002ee4 <_vfiprintf_r+0x21c>)
 8002e18:	f898 1000 	ldrb.w	r1, [r8]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f7fd fa0e 	bl	8000240 <memchr>
 8002e24:	b140      	cbz	r0, 8002e38 <_vfiprintf_r+0x170>
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	1b40      	subs	r0, r0, r5
 8002e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8002e2e:	9b04      	ldr	r3, [sp, #16]
 8002e30:	4303      	orrs	r3, r0
 8002e32:	f108 0801 	add.w	r8, r8, #1
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	f898 1000 	ldrb.w	r1, [r8]
 8002e3c:	482a      	ldr	r0, [pc, #168]	; (8002ee8 <_vfiprintf_r+0x220>)
 8002e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e42:	2206      	movs	r2, #6
 8002e44:	f108 0701 	add.w	r7, r8, #1
 8002e48:	f7fd f9fa 	bl	8000240 <memchr>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d037      	beq.n	8002ec0 <_vfiprintf_r+0x1f8>
 8002e50:	4b26      	ldr	r3, [pc, #152]	; (8002eec <_vfiprintf_r+0x224>)
 8002e52:	bb1b      	cbnz	r3, 8002e9c <_vfiprintf_r+0x1d4>
 8002e54:	9b03      	ldr	r3, [sp, #12]
 8002e56:	3307      	adds	r3, #7
 8002e58:	f023 0307 	bic.w	r3, r3, #7
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	9303      	str	r3, [sp, #12]
 8002e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e62:	444b      	add	r3, r9
 8002e64:	9309      	str	r3, [sp, #36]	; 0x24
 8002e66:	e750      	b.n	8002d0a <_vfiprintf_r+0x42>
 8002e68:	fb05 3202 	mla	r2, r5, r2, r3
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	4688      	mov	r8, r1
 8002e70:	e78a      	b.n	8002d88 <_vfiprintf_r+0xc0>
 8002e72:	2300      	movs	r3, #0
 8002e74:	f108 0801 	add.w	r8, r8, #1
 8002e78:	9305      	str	r3, [sp, #20]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	250a      	movs	r5, #10
 8002e7e:	4640      	mov	r0, r8
 8002e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e84:	3a30      	subs	r2, #48	; 0x30
 8002e86:	2a09      	cmp	r2, #9
 8002e88:	d903      	bls.n	8002e92 <_vfiprintf_r+0x1ca>
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0c3      	beq.n	8002e16 <_vfiprintf_r+0x14e>
 8002e8e:	9105      	str	r1, [sp, #20]
 8002e90:	e7c1      	b.n	8002e16 <_vfiprintf_r+0x14e>
 8002e92:	fb05 2101 	mla	r1, r5, r1, r2
 8002e96:	2301      	movs	r3, #1
 8002e98:	4680      	mov	r8, r0
 8002e9a:	e7f0      	b.n	8002e7e <_vfiprintf_r+0x1b6>
 8002e9c:	ab03      	add	r3, sp, #12
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <_vfiprintf_r+0x228>)
 8002ea4:	a904      	add	r1, sp, #16
 8002ea6:	4630      	mov	r0, r6
 8002ea8:	f3af 8000 	nop.w
 8002eac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002eb0:	4681      	mov	r9, r0
 8002eb2:	d1d5      	bne.n	8002e60 <_vfiprintf_r+0x198>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	065b      	lsls	r3, r3, #25
 8002eb8:	f53f af7e 	bmi.w	8002db8 <_vfiprintf_r+0xf0>
 8002ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ebe:	e77d      	b.n	8002dbc <_vfiprintf_r+0xf4>
 8002ec0:	ab03      	add	r3, sp, #12
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <_vfiprintf_r+0x228>)
 8002ec8:	a904      	add	r1, sp, #16
 8002eca:	4630      	mov	r0, r6
 8002ecc:	f000 f888 	bl	8002fe0 <_printf_i>
 8002ed0:	e7ec      	b.n	8002eac <_vfiprintf_r+0x1e4>
 8002ed2:	bf00      	nop
 8002ed4:	080036c0 	.word	0x080036c0
 8002ed8:	08003704 	.word	0x08003704
 8002edc:	080036e0 	.word	0x080036e0
 8002ee0:	080036a0 	.word	0x080036a0
 8002ee4:	0800370a 	.word	0x0800370a
 8002ee8:	0800370e 	.word	0x0800370e
 8002eec:	00000000 	.word	0x00000000
 8002ef0:	08002ca3 	.word	0x08002ca3

08002ef4 <_printf_common>:
 8002ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef8:	4691      	mov	r9, r2
 8002efa:	461f      	mov	r7, r3
 8002efc:	688a      	ldr	r2, [r1, #8]
 8002efe:	690b      	ldr	r3, [r1, #16]
 8002f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bfb8      	it	lt
 8002f08:	4613      	movlt	r3, r2
 8002f0a:	f8c9 3000 	str.w	r3, [r9]
 8002f0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f12:	4606      	mov	r6, r0
 8002f14:	460c      	mov	r4, r1
 8002f16:	b112      	cbz	r2, 8002f1e <_printf_common+0x2a>
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f8c9 3000 	str.w	r3, [r9]
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	0699      	lsls	r1, r3, #26
 8002f22:	bf42      	ittt	mi
 8002f24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f28:	3302      	addmi	r3, #2
 8002f2a:	f8c9 3000 	strmi.w	r3, [r9]
 8002f2e:	6825      	ldr	r5, [r4, #0]
 8002f30:	f015 0506 	ands.w	r5, r5, #6
 8002f34:	d107      	bne.n	8002f46 <_printf_common+0x52>
 8002f36:	f104 0a19 	add.w	sl, r4, #25
 8002f3a:	68e3      	ldr	r3, [r4, #12]
 8002f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	42ab      	cmp	r3, r5
 8002f44:	dc28      	bgt.n	8002f98 <_printf_common+0xa4>
 8002f46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	3300      	adds	r3, #0
 8002f4e:	bf18      	it	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	0692      	lsls	r2, r2, #26
 8002f54:	d42d      	bmi.n	8002fb2 <_printf_common+0xbe>
 8002f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f5a:	4639      	mov	r1, r7
 8002f5c:	4630      	mov	r0, r6
 8002f5e:	47c0      	blx	r8
 8002f60:	3001      	adds	r0, #1
 8002f62:	d020      	beq.n	8002fa6 <_printf_common+0xb2>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	68e5      	ldr	r5, [r4, #12]
 8002f68:	f8d9 2000 	ldr.w	r2, [r9]
 8002f6c:	f003 0306 	and.w	r3, r3, #6
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	bf08      	it	eq
 8002f74:	1aad      	subeq	r5, r5, r2
 8002f76:	68a3      	ldr	r3, [r4, #8]
 8002f78:	6922      	ldr	r2, [r4, #16]
 8002f7a:	bf0c      	ite	eq
 8002f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f80:	2500      	movne	r5, #0
 8002f82:	4293      	cmp	r3, r2
 8002f84:	bfc4      	itt	gt
 8002f86:	1a9b      	subgt	r3, r3, r2
 8002f88:	18ed      	addgt	r5, r5, r3
 8002f8a:	f04f 0900 	mov.w	r9, #0
 8002f8e:	341a      	adds	r4, #26
 8002f90:	454d      	cmp	r5, r9
 8002f92:	d11a      	bne.n	8002fca <_printf_common+0xd6>
 8002f94:	2000      	movs	r0, #0
 8002f96:	e008      	b.n	8002faa <_printf_common+0xb6>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4652      	mov	r2, sl
 8002f9c:	4639      	mov	r1, r7
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	47c0      	blx	r8
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d103      	bne.n	8002fae <_printf_common+0xba>
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fae:	3501      	adds	r5, #1
 8002fb0:	e7c3      	b.n	8002f3a <_printf_common+0x46>
 8002fb2:	18e1      	adds	r1, r4, r3
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	2030      	movs	r0, #48	; 0x30
 8002fb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fbc:	4422      	add	r2, r4
 8002fbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	e7c5      	b.n	8002f56 <_printf_common+0x62>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	4622      	mov	r2, r4
 8002fce:	4639      	mov	r1, r7
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	47c0      	blx	r8
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	d0e6      	beq.n	8002fa6 <_printf_common+0xb2>
 8002fd8:	f109 0901 	add.w	r9, r9, #1
 8002fdc:	e7d8      	b.n	8002f90 <_printf_common+0x9c>
	...

08002fe0 <_printf_i>:
 8002fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fe4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fe8:	460c      	mov	r4, r1
 8002fea:	7e09      	ldrb	r1, [r1, #24]
 8002fec:	b085      	sub	sp, #20
 8002fee:	296e      	cmp	r1, #110	; 0x6e
 8002ff0:	4617      	mov	r7, r2
 8002ff2:	4606      	mov	r6, r0
 8002ff4:	4698      	mov	r8, r3
 8002ff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ff8:	f000 80b3 	beq.w	8003162 <_printf_i+0x182>
 8002ffc:	d822      	bhi.n	8003044 <_printf_i+0x64>
 8002ffe:	2963      	cmp	r1, #99	; 0x63
 8003000:	d036      	beq.n	8003070 <_printf_i+0x90>
 8003002:	d80a      	bhi.n	800301a <_printf_i+0x3a>
 8003004:	2900      	cmp	r1, #0
 8003006:	f000 80b9 	beq.w	800317c <_printf_i+0x19c>
 800300a:	2958      	cmp	r1, #88	; 0x58
 800300c:	f000 8083 	beq.w	8003116 <_printf_i+0x136>
 8003010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003014:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003018:	e032      	b.n	8003080 <_printf_i+0xa0>
 800301a:	2964      	cmp	r1, #100	; 0x64
 800301c:	d001      	beq.n	8003022 <_printf_i+0x42>
 800301e:	2969      	cmp	r1, #105	; 0x69
 8003020:	d1f6      	bne.n	8003010 <_printf_i+0x30>
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	0605      	lsls	r5, r0, #24
 8003028:	f103 0104 	add.w	r1, r3, #4
 800302c:	d52a      	bpl.n	8003084 <_printf_i+0xa4>
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da03      	bge.n	800303e <_printf_i+0x5e>
 8003036:	222d      	movs	r2, #45	; 0x2d
 8003038:	425b      	negs	r3, r3
 800303a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800303e:	486f      	ldr	r0, [pc, #444]	; (80031fc <_printf_i+0x21c>)
 8003040:	220a      	movs	r2, #10
 8003042:	e039      	b.n	80030b8 <_printf_i+0xd8>
 8003044:	2973      	cmp	r1, #115	; 0x73
 8003046:	f000 809d 	beq.w	8003184 <_printf_i+0x1a4>
 800304a:	d808      	bhi.n	800305e <_printf_i+0x7e>
 800304c:	296f      	cmp	r1, #111	; 0x6f
 800304e:	d020      	beq.n	8003092 <_printf_i+0xb2>
 8003050:	2970      	cmp	r1, #112	; 0x70
 8003052:	d1dd      	bne.n	8003010 <_printf_i+0x30>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	e003      	b.n	8003066 <_printf_i+0x86>
 800305e:	2975      	cmp	r1, #117	; 0x75
 8003060:	d017      	beq.n	8003092 <_printf_i+0xb2>
 8003062:	2978      	cmp	r1, #120	; 0x78
 8003064:	d1d4      	bne.n	8003010 <_printf_i+0x30>
 8003066:	2378      	movs	r3, #120	; 0x78
 8003068:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800306c:	4864      	ldr	r0, [pc, #400]	; (8003200 <_printf_i+0x220>)
 800306e:	e055      	b.n	800311c <_printf_i+0x13c>
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	1d19      	adds	r1, r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6011      	str	r1, [r2, #0]
 8003078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800307c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003080:	2301      	movs	r3, #1
 8003082:	e08c      	b.n	800319e <_printf_i+0x1be>
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6011      	str	r1, [r2, #0]
 8003088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800308c:	bf18      	it	ne
 800308e:	b21b      	sxthne	r3, r3
 8003090:	e7cf      	b.n	8003032 <_printf_i+0x52>
 8003092:	6813      	ldr	r3, [r2, #0]
 8003094:	6825      	ldr	r5, [r4, #0]
 8003096:	1d18      	adds	r0, r3, #4
 8003098:	6010      	str	r0, [r2, #0]
 800309a:	0628      	lsls	r0, r5, #24
 800309c:	d501      	bpl.n	80030a2 <_printf_i+0xc2>
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	e002      	b.n	80030a8 <_printf_i+0xc8>
 80030a2:	0668      	lsls	r0, r5, #25
 80030a4:	d5fb      	bpl.n	800309e <_printf_i+0xbe>
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4854      	ldr	r0, [pc, #336]	; (80031fc <_printf_i+0x21c>)
 80030aa:	296f      	cmp	r1, #111	; 0x6f
 80030ac:	bf14      	ite	ne
 80030ae:	220a      	movne	r2, #10
 80030b0:	2208      	moveq	r2, #8
 80030b2:	2100      	movs	r1, #0
 80030b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030b8:	6865      	ldr	r5, [r4, #4]
 80030ba:	60a5      	str	r5, [r4, #8]
 80030bc:	2d00      	cmp	r5, #0
 80030be:	f2c0 8095 	blt.w	80031ec <_printf_i+0x20c>
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	f021 0104 	bic.w	r1, r1, #4
 80030c8:	6021      	str	r1, [r4, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d13d      	bne.n	800314a <_printf_i+0x16a>
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	f040 808e 	bne.w	80031f0 <_printf_i+0x210>
 80030d4:	4665      	mov	r5, ip
 80030d6:	2a08      	cmp	r2, #8
 80030d8:	d10b      	bne.n	80030f2 <_printf_i+0x112>
 80030da:	6823      	ldr	r3, [r4, #0]
 80030dc:	07db      	lsls	r3, r3, #31
 80030de:	d508      	bpl.n	80030f2 <_printf_i+0x112>
 80030e0:	6923      	ldr	r3, [r4, #16]
 80030e2:	6862      	ldr	r2, [r4, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	bfde      	ittt	le
 80030e8:	2330      	movle	r3, #48	; 0x30
 80030ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030f2:	ebac 0305 	sub.w	r3, ip, r5
 80030f6:	6123      	str	r3, [r4, #16]
 80030f8:	f8cd 8000 	str.w	r8, [sp]
 80030fc:	463b      	mov	r3, r7
 80030fe:	aa03      	add	r2, sp, #12
 8003100:	4621      	mov	r1, r4
 8003102:	4630      	mov	r0, r6
 8003104:	f7ff fef6 	bl	8002ef4 <_printf_common>
 8003108:	3001      	adds	r0, #1
 800310a:	d14d      	bne.n	80031a8 <_printf_i+0x1c8>
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	b005      	add	sp, #20
 8003112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003116:	4839      	ldr	r0, [pc, #228]	; (80031fc <_printf_i+0x21c>)
 8003118:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	6821      	ldr	r1, [r4, #0]
 8003120:	1d1d      	adds	r5, r3, #4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6015      	str	r5, [r2, #0]
 8003126:	060a      	lsls	r2, r1, #24
 8003128:	d50b      	bpl.n	8003142 <_printf_i+0x162>
 800312a:	07ca      	lsls	r2, r1, #31
 800312c:	bf44      	itt	mi
 800312e:	f041 0120 	orrmi.w	r1, r1, #32
 8003132:	6021      	strmi	r1, [r4, #0]
 8003134:	b91b      	cbnz	r3, 800313e <_printf_i+0x15e>
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	f022 0220 	bic.w	r2, r2, #32
 800313c:	6022      	str	r2, [r4, #0]
 800313e:	2210      	movs	r2, #16
 8003140:	e7b7      	b.n	80030b2 <_printf_i+0xd2>
 8003142:	064d      	lsls	r5, r1, #25
 8003144:	bf48      	it	mi
 8003146:	b29b      	uxthmi	r3, r3
 8003148:	e7ef      	b.n	800312a <_printf_i+0x14a>
 800314a:	4665      	mov	r5, ip
 800314c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003150:	fb02 3311 	mls	r3, r2, r1, r3
 8003154:	5cc3      	ldrb	r3, [r0, r3]
 8003156:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800315a:	460b      	mov	r3, r1
 800315c:	2900      	cmp	r1, #0
 800315e:	d1f5      	bne.n	800314c <_printf_i+0x16c>
 8003160:	e7b9      	b.n	80030d6 <_printf_i+0xf6>
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	6825      	ldr	r5, [r4, #0]
 8003166:	6961      	ldr	r1, [r4, #20]
 8003168:	1d18      	adds	r0, r3, #4
 800316a:	6010      	str	r0, [r2, #0]
 800316c:	0628      	lsls	r0, r5, #24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	d501      	bpl.n	8003176 <_printf_i+0x196>
 8003172:	6019      	str	r1, [r3, #0]
 8003174:	e002      	b.n	800317c <_printf_i+0x19c>
 8003176:	066a      	lsls	r2, r5, #25
 8003178:	d5fb      	bpl.n	8003172 <_printf_i+0x192>
 800317a:	8019      	strh	r1, [r3, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	6123      	str	r3, [r4, #16]
 8003180:	4665      	mov	r5, ip
 8003182:	e7b9      	b.n	80030f8 <_printf_i+0x118>
 8003184:	6813      	ldr	r3, [r2, #0]
 8003186:	1d19      	adds	r1, r3, #4
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	681d      	ldr	r5, [r3, #0]
 800318c:	6862      	ldr	r2, [r4, #4]
 800318e:	2100      	movs	r1, #0
 8003190:	4628      	mov	r0, r5
 8003192:	f7fd f855 	bl	8000240 <memchr>
 8003196:	b108      	cbz	r0, 800319c <_printf_i+0x1bc>
 8003198:	1b40      	subs	r0, r0, r5
 800319a:	6060      	str	r0, [r4, #4]
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031a6:	e7a7      	b.n	80030f8 <_printf_i+0x118>
 80031a8:	6923      	ldr	r3, [r4, #16]
 80031aa:	462a      	mov	r2, r5
 80031ac:	4639      	mov	r1, r7
 80031ae:	4630      	mov	r0, r6
 80031b0:	47c0      	blx	r8
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0aa      	beq.n	800310c <_printf_i+0x12c>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	079b      	lsls	r3, r3, #30
 80031ba:	d413      	bmi.n	80031e4 <_printf_i+0x204>
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	4298      	cmp	r0, r3
 80031c2:	bfb8      	it	lt
 80031c4:	4618      	movlt	r0, r3
 80031c6:	e7a3      	b.n	8003110 <_printf_i+0x130>
 80031c8:	2301      	movs	r3, #1
 80031ca:	464a      	mov	r2, r9
 80031cc:	4639      	mov	r1, r7
 80031ce:	4630      	mov	r0, r6
 80031d0:	47c0      	blx	r8
 80031d2:	3001      	adds	r0, #1
 80031d4:	d09a      	beq.n	800310c <_printf_i+0x12c>
 80031d6:	3501      	adds	r5, #1
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	9a03      	ldr	r2, [sp, #12]
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	42ab      	cmp	r3, r5
 80031e0:	dcf2      	bgt.n	80031c8 <_printf_i+0x1e8>
 80031e2:	e7eb      	b.n	80031bc <_printf_i+0x1dc>
 80031e4:	2500      	movs	r5, #0
 80031e6:	f104 0919 	add.w	r9, r4, #25
 80031ea:	e7f5      	b.n	80031d8 <_printf_i+0x1f8>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ac      	bne.n	800314a <_printf_i+0x16a>
 80031f0:	7803      	ldrb	r3, [r0, #0]
 80031f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031fa:	e76c      	b.n	80030d6 <_printf_i+0xf6>
 80031fc:	08003715 	.word	0x08003715
 8003200:	08003726 	.word	0x08003726

08003204 <_putc_r>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	460d      	mov	r5, r1
 8003208:	4614      	mov	r4, r2
 800320a:	4606      	mov	r6, r0
 800320c:	b118      	cbz	r0, 8003216 <_putc_r+0x12>
 800320e:	6983      	ldr	r3, [r0, #24]
 8003210:	b90b      	cbnz	r3, 8003216 <_putc_r+0x12>
 8003212:	f7ff f939 	bl	8002488 <__sinit>
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <_putc_r+0x60>)
 8003218:	429c      	cmp	r4, r3
 800321a:	d112      	bne.n	8003242 <_putc_r+0x3e>
 800321c:	6874      	ldr	r4, [r6, #4]
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	60a3      	str	r3, [r4, #8]
 8003226:	da16      	bge.n	8003256 <_putc_r+0x52>
 8003228:	69a2      	ldr	r2, [r4, #24]
 800322a:	4293      	cmp	r3, r2
 800322c:	db02      	blt.n	8003234 <_putc_r+0x30>
 800322e:	b2eb      	uxtb	r3, r5
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d110      	bne.n	8003256 <_putc_r+0x52>
 8003234:	4622      	mov	r2, r4
 8003236:	4629      	mov	r1, r5
 8003238:	4630      	mov	r0, r6
 800323a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800323e:	f7ff bb93 	b.w	8002968 <__swbuf_r>
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <_putc_r+0x64>)
 8003244:	429c      	cmp	r4, r3
 8003246:	d101      	bne.n	800324c <_putc_r+0x48>
 8003248:	68b4      	ldr	r4, [r6, #8]
 800324a:	e7e8      	b.n	800321e <_putc_r+0x1a>
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <_putc_r+0x68>)
 800324e:	429c      	cmp	r4, r3
 8003250:	bf08      	it	eq
 8003252:	68f4      	ldreq	r4, [r6, #12]
 8003254:	e7e3      	b.n	800321e <_putc_r+0x1a>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	6022      	str	r2, [r4, #0]
 800325c:	701d      	strb	r5, [r3, #0]
 800325e:	b2e8      	uxtb	r0, r5
 8003260:	bd70      	pop	{r4, r5, r6, pc}
 8003262:	bf00      	nop
 8003264:	080036c0 	.word	0x080036c0
 8003268:	080036e0 	.word	0x080036e0
 800326c:	080036a0 	.word	0x080036a0

08003270 <_read_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4c07      	ldr	r4, [pc, #28]	; (8003290 <_read_r+0x20>)
 8003274:	4605      	mov	r5, r0
 8003276:	4608      	mov	r0, r1
 8003278:	4611      	mov	r1, r2
 800327a:	2200      	movs	r2, #0
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	f7fd fbf0 	bl	8000a64 <_read>
 8003284:	1c43      	adds	r3, r0, #1
 8003286:	d102      	bne.n	800328e <_read_r+0x1e>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	b103      	cbz	r3, 800328e <_read_r+0x1e>
 800328c:	602b      	str	r3, [r5, #0]
 800328e:	bd38      	pop	{r3, r4, r5, pc}
 8003290:	200001b8 	.word	0x200001b8

08003294 <__srget_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	460c      	mov	r4, r1
 8003298:	4605      	mov	r5, r0
 800329a:	b118      	cbz	r0, 80032a4 <__srget_r+0x10>
 800329c:	6983      	ldr	r3, [r0, #24]
 800329e:	b90b      	cbnz	r3, 80032a4 <__srget_r+0x10>
 80032a0:	f7ff f8f2 	bl	8002488 <__sinit>
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <__srget_r+0x4c>)
 80032a6:	429c      	cmp	r4, r3
 80032a8:	d10d      	bne.n	80032c6 <__srget_r+0x32>
 80032aa:	686c      	ldr	r4, [r5, #4]
 80032ac:	4621      	mov	r1, r4
 80032ae:	4628      	mov	r0, r5
 80032b0:	f000 f848 	bl	8003344 <__srefill_r>
 80032b4:	b988      	cbnz	r0, 80032da <__srget_r+0x46>
 80032b6:	6863      	ldr	r3, [r4, #4]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	6063      	str	r3, [r4, #4]
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	6022      	str	r2, [r4, #0]
 80032c2:	7818      	ldrb	r0, [r3, #0]
 80032c4:	bd38      	pop	{r3, r4, r5, pc}
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <__srget_r+0x50>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	d101      	bne.n	80032d0 <__srget_r+0x3c>
 80032cc:	68ac      	ldr	r4, [r5, #8]
 80032ce:	e7ed      	b.n	80032ac <__srget_r+0x18>
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <__srget_r+0x54>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	bf08      	it	eq
 80032d6:	68ec      	ldreq	r4, [r5, #12]
 80032d8:	e7e8      	b.n	80032ac <__srget_r+0x18>
 80032da:	f04f 30ff 	mov.w	r0, #4294967295
 80032de:	e7f1      	b.n	80032c4 <__srget_r+0x30>
 80032e0:	080036c0 	.word	0x080036c0
 80032e4:	080036e0 	.word	0x080036e0
 80032e8:	080036a0 	.word	0x080036a0

080032ec <_fstat_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4c07      	ldr	r4, [pc, #28]	; (800330c <_fstat_r+0x20>)
 80032f0:	2300      	movs	r3, #0
 80032f2:	4605      	mov	r5, r0
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	6023      	str	r3, [r4, #0]
 80032fa:	f000 f8b7 	bl	800346c <_fstat>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	d102      	bne.n	8003308 <_fstat_r+0x1c>
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	b103      	cbz	r3, 8003308 <_fstat_r+0x1c>
 8003306:	602b      	str	r3, [r5, #0]
 8003308:	bd38      	pop	{r3, r4, r5, pc}
 800330a:	bf00      	nop
 800330c:	200001b8 	.word	0x200001b8

08003310 <_isatty_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4c06      	ldr	r4, [pc, #24]	; (800332c <_isatty_r+0x1c>)
 8003314:	2300      	movs	r3, #0
 8003316:	4605      	mov	r5, r0
 8003318:	4608      	mov	r0, r1
 800331a:	6023      	str	r3, [r4, #0]
 800331c:	f000 f8ae 	bl	800347c <_isatty>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_isatty_r+0x1a>
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	b103      	cbz	r3, 800332a <_isatty_r+0x1a>
 8003328:	602b      	str	r3, [r5, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	200001b8 	.word	0x200001b8

08003330 <lflush>:
 8003330:	8983      	ldrh	r3, [r0, #12]
 8003332:	f003 0309 	and.w	r3, r3, #9
 8003336:	2b09      	cmp	r3, #9
 8003338:	d101      	bne.n	800333e <lflush+0xe>
 800333a:	f7ff b853 	b.w	80023e4 <fflush>
 800333e:	2000      	movs	r0, #0
 8003340:	4770      	bx	lr
	...

08003344 <__srefill_r>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	460c      	mov	r4, r1
 8003348:	4605      	mov	r5, r0
 800334a:	b118      	cbz	r0, 8003354 <__srefill_r+0x10>
 800334c:	6983      	ldr	r3, [r0, #24]
 800334e:	b90b      	cbnz	r3, 8003354 <__srefill_r+0x10>
 8003350:	f7ff f89a 	bl	8002488 <__sinit>
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <__srefill_r+0x104>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d10a      	bne.n	8003370 <__srefill_r+0x2c>
 800335a:	686c      	ldr	r4, [r5, #4]
 800335c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003360:	2300      	movs	r3, #0
 8003362:	6063      	str	r3, [r4, #4]
 8003364:	b293      	uxth	r3, r2
 8003366:	069e      	lsls	r6, r3, #26
 8003368:	d50c      	bpl.n	8003384 <__srefill_r+0x40>
 800336a:	f04f 30ff 	mov.w	r0, #4294967295
 800336e:	e067      	b.n	8003440 <__srefill_r+0xfc>
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <__srefill_r+0x108>)
 8003372:	429c      	cmp	r4, r3
 8003374:	d101      	bne.n	800337a <__srefill_r+0x36>
 8003376:	68ac      	ldr	r4, [r5, #8]
 8003378:	e7f0      	b.n	800335c <__srefill_r+0x18>
 800337a:	4b35      	ldr	r3, [pc, #212]	; (8003450 <__srefill_r+0x10c>)
 800337c:	429c      	cmp	r4, r3
 800337e:	bf08      	it	eq
 8003380:	68ec      	ldreq	r4, [r5, #12]
 8003382:	e7eb      	b.n	800335c <__srefill_r+0x18>
 8003384:	0758      	lsls	r0, r3, #29
 8003386:	d449      	bmi.n	800341c <__srefill_r+0xd8>
 8003388:	06d9      	lsls	r1, r3, #27
 800338a:	d405      	bmi.n	8003398 <__srefill_r+0x54>
 800338c:	2309      	movs	r3, #9
 800338e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	81a2      	strh	r2, [r4, #12]
 8003396:	e7e8      	b.n	800336a <__srefill_r+0x26>
 8003398:	071a      	lsls	r2, r3, #28
 800339a:	d50b      	bpl.n	80033b4 <__srefill_r+0x70>
 800339c:	4621      	mov	r1, r4
 800339e:	4628      	mov	r0, r5
 80033a0:	f7fe fff6 	bl	8002390 <_fflush_r>
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d1e0      	bne.n	800336a <__srefill_r+0x26>
 80033a8:	89a3      	ldrh	r3, [r4, #12]
 80033aa:	60a0      	str	r0, [r4, #8]
 80033ac:	f023 0308 	bic.w	r3, r3, #8
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	61a0      	str	r0, [r4, #24]
 80033b4:	89a3      	ldrh	r3, [r4, #12]
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	6923      	ldr	r3, [r4, #16]
 80033be:	b91b      	cbnz	r3, 80033c8 <__srefill_r+0x84>
 80033c0:	4621      	mov	r1, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	f7ff fc14 	bl	8002bf0 <__smakebuf_r>
 80033c8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80033cc:	b2be      	uxth	r6, r7
 80033ce:	07b3      	lsls	r3, r6, #30
 80033d0:	d00f      	beq.n	80033f2 <__srefill_r+0xae>
 80033d2:	2301      	movs	r3, #1
 80033d4:	81a3      	strh	r3, [r4, #12]
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <__srefill_r+0x110>)
 80033d8:	491f      	ldr	r1, [pc, #124]	; (8003458 <__srefill_r+0x114>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	f006 0609 	and.w	r6, r6, #9
 80033e0:	f7ff f8be 	bl	8002560 <_fwalk>
 80033e4:	2e09      	cmp	r6, #9
 80033e6:	81a7      	strh	r7, [r4, #12]
 80033e8:	d103      	bne.n	80033f2 <__srefill_r+0xae>
 80033ea:	4621      	mov	r1, r4
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7fe ff49 	bl	8002284 <__sflush_r>
 80033f2:	6922      	ldr	r2, [r4, #16]
 80033f4:	6022      	str	r2, [r4, #0]
 80033f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80033f8:	6963      	ldr	r3, [r4, #20]
 80033fa:	6a21      	ldr	r1, [r4, #32]
 80033fc:	4628      	mov	r0, r5
 80033fe:	47b0      	blx	r6
 8003400:	2800      	cmp	r0, #0
 8003402:	6060      	str	r0, [r4, #4]
 8003404:	dc1d      	bgt.n	8003442 <__srefill_r+0xfe>
 8003406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340a:	bf17      	itett	ne
 800340c:	2200      	movne	r2, #0
 800340e:	f043 0320 	orreq.w	r3, r3, #32
 8003412:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003416:	6062      	strne	r2, [r4, #4]
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7a6      	b.n	800336a <__srefill_r+0x26>
 800341c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800341e:	2900      	cmp	r1, #0
 8003420:	d0cc      	beq.n	80033bc <__srefill_r+0x78>
 8003422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003426:	4299      	cmp	r1, r3
 8003428:	d002      	beq.n	8003430 <__srefill_r+0xec>
 800342a:	4628      	mov	r0, r5
 800342c:	f7ff f910 	bl	8002650 <_free_r>
 8003430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003432:	6063      	str	r3, [r4, #4]
 8003434:	2000      	movs	r0, #0
 8003436:	6360      	str	r0, [r4, #52]	; 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0bf      	beq.n	80033bc <__srefill_r+0x78>
 800343c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800343e:	6023      	str	r3, [r4, #0]
 8003440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003442:	2000      	movs	r0, #0
 8003444:	e7fc      	b.n	8003440 <__srefill_r+0xfc>
 8003446:	bf00      	nop
 8003448:	080036c0 	.word	0x080036c0
 800344c:	080036e0 	.word	0x080036e0
 8003450:	080036a0 	.word	0x080036a0
 8003454:	08003700 	.word	0x08003700
 8003458:	08003331 	.word	0x08003331

0800345c <_close>:
 800345c:	4b02      	ldr	r3, [pc, #8]	; (8003468 <_close+0xc>)
 800345e:	2258      	movs	r2, #88	; 0x58
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f04f 30ff 	mov.w	r0, #4294967295
 8003466:	4770      	bx	lr
 8003468:	200001b8 	.word	0x200001b8

0800346c <_fstat>:
 800346c:	4b02      	ldr	r3, [pc, #8]	; (8003478 <_fstat+0xc>)
 800346e:	2258      	movs	r2, #88	; 0x58
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f04f 30ff 	mov.w	r0, #4294967295
 8003476:	4770      	bx	lr
 8003478:	200001b8 	.word	0x200001b8

0800347c <_isatty>:
 800347c:	4b02      	ldr	r3, [pc, #8]	; (8003488 <_isatty+0xc>)
 800347e:	2258      	movs	r2, #88	; 0x58
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	2000      	movs	r0, #0
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	200001b8 	.word	0x200001b8

0800348c <_lseek>:
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <_lseek+0xc>)
 800348e:	2258      	movs	r2, #88	; 0x58
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	4770      	bx	lr
 8003498:	200001b8 	.word	0x200001b8

0800349c <_sbrk>:
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <_sbrk+0x14>)
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	4602      	mov	r2, r0
 80034a2:	b909      	cbnz	r1, 80034a8 <_sbrk+0xc>
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <_sbrk+0x18>)
 80034a6:	6019      	str	r1, [r3, #0]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	4402      	add	r2, r0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	4770      	bx	lr
 80034b0:	200000c4 	.word	0x200000c4
 80034b4:	200001c0 	.word	0x200001c0

080034b8 <_init>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	bf00      	nop
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr

080034c4 <_fini>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr
